<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CC2541 SweynTooth BLE漏洞实测</title>
    <url>/2020/05/17/CC2541%20SweynTooth%20BLE%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%B5%8B/</url>
    <content><![CDATA[<p>SweynTooth hacker攻击蓝牙SoC时，人为设置错误的LL链路层CONNECT_REQ数据包回复给从机设备，导致从机设备蓝牙controller和host端处理异常。本文利用CC2541EVM，亲测蓝牙漏洞Invalid Connection Request (CVE-2019-19193)。<br><img src="1.jpeg" alt=""></p>
<a id="more"></a>

<h1 id="平台搭建"><a href="#平台搭建" class="headerlink" title="平台搭建"></a>平台搭建</h1><ul>
<li><p>CC2541EVM (烧录SimplePeripheral固件, BLE-CC254x-1.5.0.16)</p>
</li>
<li><p>Nordic52840 usb dongle</p>
</li>
<li><p>Python2.7</p>
</li>
<li><p>Pycharm（选配）</p>
</li>
<li><p>Wireshark </p>
</li>
</ul>
<p><img src="2.jpeg" alt=""></p>
<h1 id="Master-python环境搭建"><a href="#Master-python环境搭建" class="headerlink" title="Master python环境搭建"></a>Master python环境搭建</h1><p>安装python2.7，配置环境变量（过程忽略，Bing搜索）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pyserial</span><br><span class="line">pip install --upgrade nrfutil</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt=""></p>
<p>烧录NORDIC52840 USB固件（更新前请按下USB设备上的复位按键，引导bootloader）</p>
<p><img src="5.png" alt=""></p>
<p>测试平台已经就绪，在Windows命令行下运行脚本CC_connection_req_crash.py，需要设置usb设备的串口号，以及需要攻击的从机设备mac地址，如图所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python CC_connection_req_crash.py com13 78:04:73:B5:C7:28</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt=""></p>
<p>可以看到红色字体已经提示从机出现了问题，从此再扫描不到该从机设备。</p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>设置主机端请求从机设备连接的connection interval值为0，该设置是SIG SPEC规范CONNECT_REQ数据包不允许的操作方式，通过python脚本模拟ble CONNECT_REQ数据包攻击从机广播设备。</p>
<p>脚本中用到scapy模块（不要与爬虫的scrapy混淆），该模块用于生成BLE协议数据包。</p>
<p><img src="6.png" alt=""></p>
<p>通过wrpcap(‘CC2540_connection_req_crash.pcap’, conn_request)保存CONNECT_REQ攻击包，我们用wireshark打开，可以看到连接CC2541的CONNECT_REQ数据包参数interval被人为设置为0，回复给CC2541。</p>
<p><img src="7.png" alt=""></p>
<h1 id="攻击效果"><a href="#攻击效果" class="headerlink" title="攻击效果"></a>攻击效果</h1><p><img src="8.png" alt=""><br><img src="9.png" alt=""></p>
<p>（lcd显示的Adv 变为Disconnect状态，并未像蓝牙正常或异常断开后自动恢复到adv状态，此时CC2541已处于非广播模式）</p>
<p>在BLE连接的初始阶段，主机设备扫描从机设备的广播数据包，并发送一个连接请求数据包，其中包含诸如连接间隔和超时之类的相关参数。这两个参数分别控制从设备和主设备之间的数据包交换和超时。SIG规定它们的值必须为一个非零时间段（以毫秒为单位）。</p>
<p>但是，如果主设备发送无效的连接请求，且其字段间隔或超时都为零时，从设备将停止通告。在接收到无效的连接请求期间，BLE协议栈将连接请求失败事件发送到应用程序代码（bleGAPConnNotAcceptable），并且在收到该失败状态后，协议框架默认程序进入空闲状态，从而停止广播。</p>
<p>这就是该漏洞的攻击原理，同样，我们可以设置CONNECT_REQ timeout设置为0进行攻击，一样会造成设备停止广播。</p>
<h1 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h1><p>设备虽然受到攻击后不能再广播，但内置mcu功能不受影响，设备依然能按照设计的功能工作，只是蓝牙无法再工作。由于该漏洞攻击实施起来非常方便，该问题有可能被用于散播恶意诋毁竞品，达到打击竞品品牌的效应。</p>
<p><strong>此次漏洞暴露了蓝牙测试认证的缺陷，攻击者采用非</strong>规范数据包对蓝牙设备进行欺诈攻击；不按规矩出牌，往往能取得意想不到的效果。</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>蓝牙协议</category>
      </categories>
      <tags>
        <tag>cc2541漏洞</tag>
        <tag>ti cc2541</tag>
        <tag>python</tag>
        <tag>SweynTooth</tag>
      </tags>
  </entry>
  <entry>
    <title>SIG MESH 核心协议与技术框架</title>
    <url>/2020/05/16/SIG%20MESH%20%E6%A0%B8%E5%BF%83%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>终于开启了SIG MESH组网这个话题，本文作为MESH系列的第一篇，介绍Bluetooth mesh 1.0协议的体系结构和功能。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Bluetooth Mesh协议作为蓝牙低功耗协议的补充协议，独立于蓝牙5.0，该协议首次将开放标准的网状网络引入低功耗蓝牙设备。</p>
<p>MESH网络是针对面向智能家居和楼宇自动化应用应用而生的低功耗无线技术， 但是由于蓝牙联盟之前缺乏对MESH网络支持，使得使用低功耗蓝牙的工程师不得不选择其他技术（例如Zigbee和Thread）用于智能家居应用的开发，直到2017年中蓝牙MESH的规范公之于众。现在蓝牙SIG通过引入蓝牙5.0补充规范-蓝牙网状网络1.0解决了MESH组网这一欠缺。该规范不需要其他硬件支持，可以通过刷新固件在目前已有蓝牙低功耗芯片（v4.0、4.1、4.2和5）上运行。一些芯片厂家已经可以支持Bluetooth Mesh 1.0协议。</p>
<h1 id="SIG-MESH市场现状"><a href="#SIG-MESH市场现状" class="headerlink" title="SIG MESH市场现状"></a>SIG MESH市场现状</h1><p>到目前为止，全球已经在SIG联盟认证的BLE MESH的企业共有73家，认证的产品数量高达461个，该数据包括终端产品和芯片的认证总数，下表罗列出认证企业和其产品认证的数量，其中国的互联网巨头认证的终端产品不少。</p>
<p><img src="1.jpg" alt=""></p>
<h1 id="SIG-MESH网络的优势"><a href="#SIG-MESH网络的优势" class="headerlink" title="SIG MESH网络的优势"></a>SIG MESH网络的优势</h1><p>低功耗蓝牙最初旨在通过将无线技术扩展到电池供电的设备，补充“经典”蓝牙低功耗的不足。比如低功耗蓝牙在心率带或无线控制的玩具应用，这些设备都通过低功耗蓝牙与主机设备（例如手机）进行通信，，甚至一个主机设备控制多个从机设备，形成星形网络拓扑。</p>
<p>低功耗蓝牙由于其与手机的互操作性在一定程度上帮助其迅速扩展到其他领域应用，包括照明控制，智能家居等。在这些类型的应用中，星形网络的缺点就变得很明显。例如，蓝牙低功耗解决方案只能应付有限数量的同时连接（通常为八个），灯泡数量超过该数量的照明设备无法通过单个命令进行控制，从而导致控制延迟。其次，在大房子，远处的灯泡可能不在中央控制器的范围内，需要有路由功能的节点转接。</p>
<p>在网状网络中，不是通过Gateway与各个外围设备进行通信，而是通过跨连接多个节点的双向通道进行转发，将消息从网络中的一个点中继到其他任何点。这样，网状网络带来了显着的优势，因为它允许同时控制多个连接设备，克服了范围限制。</p>
<p><img src="2.png" alt=""></p>
<h1 id="SIG-MESH核心协议"><a href="#SIG-MESH核心协议" class="headerlink" title="SIG MESH核心协议"></a>SIG MESH核心协议</h1><p>自从推出Bluetooth LE以来，低功耗蓝牙已推出版本4.1、4.2、5.0，和5.1版本，协议中增加了比如传输范围、吞吐量、广播数据载核、AoA、AoD定位，以及共存方面的改进（当然，这些新特性有些属于可选，可选的意思是不支持这些新功能的芯片也可以是蓝牙5.0的芯片）。 </p>
<p><strong>Bluetooth Mesh 1.0不是简单的Bluetooth 5的升级，他是独立与蓝牙协议之外的一套协议，任何旧版（4.0、4.1、4.2、5）低功耗蓝牙芯片产品都可以进行修改升级，仅需进行固件升级即可运行蓝牙网格，前提是flash和ram资源足够。</strong></p>
<p><strong>BLE MESH核心协议向蓝牙协议兼容的特点在于，蓝牙MESH网络并不是蓝牙BLE协议栈中不可或缺的一部分，而是一个由七个层组成的单独的新实体，其中的某些节点可以和蓝牙协议进行数据交互。</strong></p>
<p><img src="3.png" alt=""></p>
<p>当蓝牙MESH节点收到消息时，它将消息从底层蓝牙低功耗协议中获取的数据传递给承载层，蓝牙数据再通过承载层再传递到网络层。网络层应用各种检查来决定是将消息传递到传输层还是将其丢弃。</p>
<p>蓝牙MESH规范定义了一个全新的核心协议，该核心协议的部分层与蓝牙低功耗核心协议层共享一些概念，但两者不完全兼容。这与Zigbee和Thread等技术有些不同，Zigbee和Thread从一开始就被设计为MESH网络，其底层规范基于802.15.4，但并未考虑其他主流协议的兼容性（近两年Zigbee在顶层考虑使用dotdot以兼容其他网络协议，到达互联互通，详见<a href="https://zigbeealliance.org/solution/dotdot/）。" target="_blank" rel="noopener">https://zigbeealliance.org/solution/dotdot/）。</a></p>
<h1 id="SIG-MESH架构"><a href="#SIG-MESH架构" class="headerlink" title="SIG MESH架构"></a>SIG MESH架构</h1><p>蓝牙网状网使用“泛洪”技术在网络上发送消息（说人话：病毒传播方式）。每个数据包都转发广播到网络中的其他节点，直到消息送达目标节点为止。消息广播可以针对单个节点，一组节点或所有节点。举个例子，我们可以把单个房间所有的灯定义为一个组地址。蓝牙mesh规范定义了四个固定组地址：<strong>“所有代理节点”，“所有好友节点”，“所有中继节点”和“所有节点”</strong>以专门针对节点类型。（LPN不具备转发消息功能，因为他要保持低功耗，就是这么高冷）。</p>
<p><strong>泛洪网状mesh架构</strong>和<strong>组地址的选择</strong>增强了蓝牙MESH网络对于智能家居应用支持。例如，MESH网络中的Gateway设备收到“ ON” 命令，可以通过MESH网络快速把该指令广播到整个网络，每个网络中的节点设备都接收该命令并据此采取行动，目标组中的灯可以几乎立即点亮。</p>
<p>相比于星型网络而言，MESH网络节点平均接收数据的最小等待时间比星形网络的最小等待时间低得多，因为在星形网络中，要求中央设备向每个连接的灯传输单独的命令，中央处理器需要分时下达指令到所以子设备。</p>
<p>蓝牙MESH有一个和传统蓝牙不一致的地方，所有的mesh数据只会在37，38，39三广播信道传输，这种数据传输策略有好有坏，好的地方是效率高，信道传输策略简单；缺点是减少了网络带宽，增加了拥塞风险。</p>
<p><strong>MESH网络处理拥塞的机制有两种</strong>：第一个是<strong>“生存时间”（TTL）计数器</strong>，它定义特定数据包可以中继多少次（典型值为三个步骤）。第二个是<strong>广播数据包缓存</strong>，设备捕获一帧转发的数据包后只会广播一次，下次接收到其他设备广播的相同信息数据包时，该设备不需要进一步转发。</p>
<p>开发人员还可以采用可选的组传递路线，以及保留中继功能，这样设置后，节点可以接收数据包，但不能将其传递，节点的灵活性会变差。</p>
<h1 id="SIG-MESH网状节点"><a href="#SIG-MESH网状节点" class="headerlink" title="SIG MESH网状节点"></a>SIG MESH网状节点</h1><p>蓝牙网格使用四种类型的网络节点：</p>
<p><strong>中继节点（Relay Nodes ）</strong>中继节点通过网络层接收和转发数据包。中继节点的缺点是它们必须始终保持警报状态，这会大大增加功耗。这对于诸如智能照明之类的主电源供电的应用程序不是不利的，但是对于诸如被并入网络中的交换机之类的非主电源供电的节点则是一个问题。</p>
<p><strong>低功耗节点（LPN）</strong>低功耗节点采用蓝牙低功耗的标准节电特性（即：长时间处于睡眠状态），因此可以通过电池或能量收集来长期运行。每个LPN都连接到由市电供电的Friend Node，该Friend Node保持唤醒状态并缓存指向LPN的所有消息。当LPN进入接收模式（按照预定的时间表）时，它接受缓存的消息，按照指示进行操作，然后返回节能睡眠模式。</p>
<p><strong>友邻节点（Friend Nodes）</strong>友邻特性收听网络中转发的任何消息，友邻节点会存储这些消息，当低功耗节点唤醒并Polling友邻节点时，将这些消息传送给相关的低功耗节点。由于友邻节点需要为一个或多个低功耗节点存储消息，因此友邻节点会比其他类型的节点多占用存储器。所需的存储器大小取决于需要存放在友邻节点、并在轮询操作中传送给低功耗节点的数据/命令数量。</p>
<p><strong>代理节点（Proxy Nodes）</strong>代理节点是非BLE MESH设备（手机）连接到BLE MESH网络的唯一入口。对于不直接支持蓝牙的Mesh设备，具备代理特性的节点是它们登入Mesh网络的入口。代理特性支持节点在GATT（通用属性）层和广播承载层之间转发消息，而在蓝牙Mesh网络中，消息是通过广播承载层转发。例如，当用户希望使用传统智能手机来控制智能照明网络时，此功能很有用。交互是通过节点和设备的通用属性配置文件（GATT）数据传输实现。</p>
<p><img src="4.png" alt=""></p>
<p>举个例子，如图所示的温度传感器是电池供电的LPN，设备定期从灯泡友邻节点（最左端长供电的灯泡）接收发送温度消息，温度消息通过灯泡间的传递，最后智能手机通过BLE的GATT层和代理节点的灯泡进行数据传递（左上）。</p>
<p>另外，在新节点加入MESH网络前，必须进行入网配置，用于保证该新设备可访问网络中所有节点，是一个受信任的设备。进入网络后，MESH网络为新节点分配地址，以及设备类型和设备密钥。设置后，设备密钥用于建立安全通道以配置新节点使用，理论上蓝牙MESH网络可以支持多达32,000个节点。</p>
<h1 id="SIG-MESH模型"><a href="#SIG-MESH模型" class="headerlink" title="SIG MESH模型"></a>SIG MESH模型</h1><p>MESH MODE的概念类似蓝牙的profile概念，该模型规定一个公共信息结构体，内部可以包含一个或者多个服务（MODE的概念是用于定义终端设备）。</p>
<p>模型包含节点特定的行为或服务，并定义了一组状态以及对这些状态起作用的消息。标准模型涵盖了典型的使用场景，例如设备配置，传感器读数和照明控制。 开发者还可以创建自定义模型。</p>
<p>节点中的模型按元素排列；每个元素都充当具有唯一地址的网格中的虚拟实体。每个传入消息都由元素中的模型处理。</p>
<p><img src="5.png" alt=""></p>
<p>不同的模型间通过 “<strong>发布和订阅</strong>”方式相互交谈。发布节点发送一条消息，配置为订阅的节点接收到消息后会进行处理。</p>
<p>在下图中，最左边的灯开关（开关1）指令发布到Kitchen组地址，假设节点Light 1，Light 2和Light 3（灯的顺序从左往右）订阅了Kitchen地址，因此它们会接收处理并根据发布到该地址的消息（例如“ on”和“ off”命令）进行操作。Light 3也预订了饭厅地址，因此可以从Switch 2以及Switch 1进行操作。</p>
<p><img src="6.png" alt=""></p>
<h1 id="SUIG-MESH配入网流程"><a href="#SUIG-MESH配入网流程" class="headerlink" title="SUIG MESH配入网流程"></a>SUIG MESH配入网流程</h1><p>下图是一个完整的配网订阅的例子，该流程是蓝牙MESH配网注册设备的标准流程，灯泡首先向MESH网络发送信号，告知其正在寻找要加入的网络。配置节点会验证灯泡的信标，并邀请其加入网络。如果身份验证成功，则会为设备提供必要的密钥和地址，以加入网络并为配置做准备。接下来，为灯泡提供“家庭自动化”应用程序密钥。设置“ OnOff服务器”（控制灯泡）的发布状态，最后添加对“灯组”的订阅。</p>
<p><img src="8.png" alt=""></p>
<h1 id="SIG-MESH应用"><a href="#SIG-MESH应用" class="headerlink" title="SIG MESH应用"></a>SIG MESH应用</h1><p>对SIG认证的产品进行初略统计发现，BLE MESH的应用主要集中在智能家居和灯控场合，灯控占6成，智能家具设备占3成，还有一成属于原厂的芯片认证以及小众市场应用，BLE MESH无疑已经是Zigbee最大的竞争对手，后续慢慢分析。</p>
<p><img src="13.png" alt=""></p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>SIG MESH</category>
      </categories>
      <tags>
        <tag>MESH</tag>
        <tag>MESH技术</tag>
        <tag>MESH市场</tag>
      </tags>
  </entry>
  <entry>
    <title>BLE Controller框架梳理</title>
    <url>/2020/08/11/Controller%E6%A1%86%E6%9E%B6%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h1 id="BLE-Controller基本概念"><a href="#BLE-Controller基本概念" class="headerlink" title="BLE Controller基本概念"></a>BLE Controller基本概念</h1><h2 id="Controller构成"><a href="#Controller构成" class="headerlink" title="Controller构成"></a>Controller构成</h2><p>蓝牙协议分host和controller两个部分，Host是正真意义的蓝牙协议，Controller为蓝牙底层，或者说是基带芯片。基带芯片又可以分为三个部分，Radio，Link Layer和HCI。</p>
<a id="more"></a>

<p><img src="1.png" alt=""></p>
<h2 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h2><p>Radio可以理解为一个独立的协处理器，负责调制解调2.4G裸数据，完整的Radio功能应该包括，数据组包拆包，CRC校验，白话，调制解调等功能。</p>
<p><img src="2.png" alt=""></p>
<p>根据Controller的设计需要，Radio协处理器被设计为一个小型状态机，下图为Nordic 52810 Radio内核状态机状态，该状态机分为9种状态，Radio会输出下图9种状态给SOC芯片，SOC芯片根据相应状态机状态，进行处理，协处理器和SOC之间共用数据总线。</p>
<p><img src="3.png" alt=""></p>
<p><img src="4.png" alt=""></p>
<h2 id="Link-layer架构"><a href="#Link-layer架构" class="headerlink" title="Link layer架构"></a>Link layer架构</h2><p>Link Layer决定蓝牙所处的状态，蓝牙可以分为idel（standby），adv，scan，init以及connection状态，connection又可分为master或者slave。状态之间可以相互转换。</p>
<p><img src="5.png" alt=""></p>
<p>Link Layer允许多种状态同时并存，一个piconet可以支持多种状态，即Combination States。Combination States并不是任意若干种状态的结合，其中有限制存在，比如一个piconet不可能同时支持master和slave状态，比如两个scan不能同时存在，下图多多状态的二维组合分布图。</p>
<p><img src="6.png" alt=""></p>
<h2 id="HCI架构"><a href="#HCI架构" class="headerlink" title="HCI架构"></a>HCI架构</h2><p>蓝牙和蓝牙WIFI二合一芯片HOST和Controller早期都是两类芯片厂家分开提供，两颗芯片交互需要采用统一标准，HCI层由此而来。Host蓝牙协议只需要按照蓝牙联盟规范的HCI指令即可控制蓝牙controller。</p>
<p><img src="7.png" alt=""></p>
<h1 id="Controller宏观认知"><a href="#Controller宏观认知" class="headerlink" title="Controller宏观认知"></a>Controller宏观认知</h1><h2 id="ADV广播"><a href="#ADV广播" class="headerlink" title="ADV广播"></a>ADV广播</h2><p><img src="8.png" alt=""></p>
<h2 id="SCAN扫描"><a href="#SCAN扫描" class="headerlink" title="SCAN扫描"></a>SCAN扫描</h2><p><img src="9.png" alt=""></p>
<h2 id="INIT初始化"><a href="#INIT初始化" class="headerlink" title="INIT初始化"></a>INIT初始化</h2><p><img src="10.png" alt=""></p>
<h2 id="Connection连接"><a href="#Connection连接" class="headerlink" title="Connection连接"></a>Connection连接</h2><p><img src="11.png" alt=""></p>
<h1 id="Controller核心框架"><a href="#Controller核心框架" class="headerlink" title="Controller核心框架"></a>Controller核心框架</h1><h2 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h2><p>Link Layer和芯片Radio设计相关度较大，根据与PYH（radio）传输接口的不一样，可以分为：</p>
<ul>
<li><p>Radio负责packet，即硬件只提供收或者发一个包的接口。</p>
</li>
<li><p>Radio负责frame，即硬件提供包含一个IFS的一组收发的接口。</p>
</li>
<li><p>Radio硬件负责event，即硬件提供控制整个event内，若干组收发的接口（CEVA BLE IP的实现采用的就是这种）。</p>
</li>
</ul>
<p>三种方案数字设计的复杂度是递增的，灵活性是递减的，对CPU的处理能力需求是递减的。</p>
<h2 id="LL调度机制-Radio负责packet"><a href="#LL调度机制-Radio负责packet" class="headerlink" title="LL调度机制-Radio负责packet"></a>LL调度机制-Radio负责packet</h2><p>以Radio负责packet的方案介绍LL的整体设计思路：</p>
<p>根据Radio状态机的9种状态，设计Link Layer中的adv，scan，init，master，slave 事件，事件之间的存在如下相互转换关系：</p>
<p><img src="12.png" alt=""></p>
<p>每个事件结束后，调用任务调度机，决定ll下一个状态，下一个ll状态可能是当前状态的延续，可能是新的状态，也可能是当前状态和新的状态的Combination，所以ll调度机不光决定一个状态，还需要考虑多状态能否共存，Scheduler确定是否能执行下一个状态后，启动该任务，执行该任务。</p>
<p>谈到状态共存，adv，scan，init必须给connection事件让步，在这个时间内，哪些事可以提前做，哪些事需要推迟做，这是Scheduler需要考虑的。</p>
<p><img src="13.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LL事件，Scheduler任务调度，HCI组包解包是构成Radio的三大模块， 弄清楚整个控制框架，配合时间戳要求，才能把controller玩转起来，controller时间戳同步也是一个非常头疼的话题，特别是搅合在任务调度一起，到此了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="master-slave共存"><a href="#master-slave共存" class="headerlink" title="master/slave共存"></a>master/slave共存</h2><p>一个controller可以支持多个ll状态机，一个ll状态机的状态不允许master&amp;slave同时存在(上文已经说明)，但可以通过分别开启两个ll状态机（piconet的概念由来），一个在master状态，一个在slave状态，这样从使用者的角度上看，就是master和slave共存。</p>
<h2 id="BT5-2-新状态"><a href="#BT5-2-新状态" class="headerlink" title="BT5.2 新状态"></a>BT5.2 新状态</h2><p>BT 5.2增加了两个新状态，一个isochronous broadcasting 一个synchronization。</p>
<p><img src="14.png" alt=""></p>
<p><strong>参考资料</strong></p>
<ul>
<li><p>Ble_101_frontline</p>
</li>
<li><p>Nordic52810 spec</p>
</li>
<li><p>蓝牙5.0 spec</p>
</li>
</ul>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>蓝牙协议</category>
      </categories>
      <tags>
        <tag>蓝牙 controller</tag>
        <tag>ll 状态机</tag>
        <tag>蓝牙 radio</tag>
        <tag>蓝牙 phy</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter会改变智能家居现状吗？国产半导体发力多模Zigbee, Thread，BLE芯片!</title>
    <url>/2022/02/07/Matter%E4%BC%9A%E6%94%B9%E5%8F%98%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E7%8E%B0%E7%8A%B6%E5%90%97%EF%BC%9F%E5%9B%BD%E4%BA%A7%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%8F%91%E5%8A%9B%E5%A4%9A%E6%A8%A1Zigbee-Thread%EF%BC%8CBLE%E8%8A%AF%E7%89%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>It doesn’t matter if you don’t know Matter…</p>
<p>从2019年底至今，物联网行业圈被提问和讨论次数最多的话题要属Matter协议了，当时的名字还叫Project Connected Home overIP, 由谷歌、亚马逊、苹果、zigbee联盟发起新的合作，共同成立一个名为“Connected Home Over IP”的小组，以IP通信协议为基础打造一个能够实现不同协议之间互通并且可以互操作的智能家居协议标准，共同发力来解决当下针对智能家居市场通信标准的碎片化问题，消除给终端用户使用上带来的巨大困扰。</p>
<p>直至今年5月，2002年成立的Zigbee联盟改名叫CSA(ConnectivityStandard Alliance)， 从字面意思来理解是一个跟连接标准相关的联盟，听上去更加霸气，像一个全家桶。当初Connected Home Over IP协议改名成了Matter，it doesn’t matter的Matter。</p>
<a id="more"></a>


<p><img src="1.png" alt=""></p>
<p>CSA联盟更是把matter协议放在最显眼的位置，可以看出matter的地位以及大家热捧的程度。</p>
<p><img src="2.png" alt=""></p>
<p>随着Matter的协议开发计划的发布，工作小组日夜兼程的工作，落地的脚步也日益趋紧，仍有很多问题值得我们深入分析：</p>
<p>Matter协议的问世对现有的智能家居物联网通信协议产生哪些变化？</p>
<p>国外巨头纷纷打破各自划地为营的僵局，国内的厂商是否也有动作？</p>
<p>终端产品厂商是否都在虎视眈眈，抢夺Matter协议带来的初期红利？</p>
<h1 id="Matter协议的问世对现有的智能家居物联网通信协议产生哪些变化？"><a href="#Matter协议的问世对现有的智能家居物联网通信协议产生哪些变化？" class="headerlink" title="Matter协议的问世对现有的智能家居物联网通信协议产生哪些变化？"></a>Matter协议的问世对现有的智能家居物联网通信协议产生哪些变化？</h1><p>在现有智能家居物联网产品使用的通信协议也是五花八门，每个技术都有自己的特点和应用场景。</p>
<p><img src="3.png" alt=""></p>
<p>Matter既然是物联网通信相关的协议，而且是主要定位在应用层协议，是否会对这些协议的发展，尤其是使用这些协议技术的产品落地带来影响呢，答案是肯定的。从目前的Matter工作组中，第一波讨论和支持的协议分别是WiFi，Thread，Zigbee，Bluetooth。</p>
<p><img src="4.png" alt=""></p>
<p>天生基于IP协议的WiFi是否将再次被助推？</p>
<p>WiFi作为目前物理网应用市场最热门的通信协议之一，再次因为matter协议的诞生而得益。一方面WiFi从一开始就是基于ip协议的技术，能够直接支持matter也是顺理成章的事。另一方面WiFi一直缺少应用层面的协议统一，特别是智能家居行业业务层面的统一，虽然大家熟悉Http,CoAp, MQTT等在物联网应用被广泛应用的应用层协议，但都是属于通信层面的标准。</p>
<p><img src="5.png" alt=""></p>
<p>当初IOT WiFi产品刚刚掀起时，最吃香的产品就是智能插座，到处都是Smart Plug，但是问题也随之出现。每个厂商生产的Smart Plug都会有一个特定的手机App需要安装，功能上大同小异，但是手机上缺安装了很多App，而且每个厂家使用的通信协议，协议上定义的业务数据格式都不相同，要谈互操作更是难上难。</p>
<p>如今有了Matter协议的支持，在应用业务上做到的了统一，使得基于WiFi的智能家居产品间的互操作成为了可能，更给力的是WiFi产品还可以跟其他的无线技术产品进行互操作，让WiFi产品变的更加Smart。</p>
<p>插上应用层翅膀的Thread协议能否起飞，开始切割智能家居的蛋糕？</p>
<p>也许你还第一次听说Thread这个协议，其实在2014年已经诞生了，Thread协议由谷歌Nest实验室主导开发。当第一次看完Thread协议标准时，确实因为很多技术点的先进性和实用性而兴奋，比方说没有single-point-of-fialure的去中心化mesh网络，基于ipv6协议易于接入互联网，更高级别的安全标准，Open Souce Stack保障更好的兼容性，更多设备角色等特点，尤其相比zigbee和z-wave而言。也许这些也是为什么很多国外巨头纷纷加入Thread联盟的原因。但是技术上的优点并没有帮助Thread快速进行产品化落地，在国外还能看到一些厂商的Thread产品，在国内更是寥寥无几。</p>
<p><img src="6.png" alt=""></p>
<p>其原因也是应用层缺乏统一的标准，虽然也有Google Weave这样的应用层支持，但还是缺乏强有力的推动。如今Matter协议的支持算是给Thread协议插上应用层的翅膀，而且是各大巨头公认的翅膀。Thread可以利用基于ip的优点，轻易的接入Matter网络，实现与其他产品的互操作。</p>
<p><img src="7.png" alt=""></p>
<p>如此看起来Thread协议可以完美的应用在智能家居系统，可能开始撬动同类zigbee，z-wave等协议在智能家居系统的中地位。也许国外可能发展的更快，有Google Home，Amzon Echo，Apple HomePod生态的支持，肯定能够加速Thread单品类产品接入。但是在国内可能需要相当长的时间，关键还是生态，就拿目前智能家居应用最广泛的B端精装房市场，几乎已经把zigbee协议作为行业标准。</p>
<h1 id="Zigbee产品能否开始进入单品时代？"><a href="#Zigbee产品能否开始进入单品时代？" class="headerlink" title="Zigbee产品能否开始进入单品时代？"></a>Zigbee产品能否开始进入单品时代？</h1><p>了解zigbee的厂商或者开发者，经常谈及zigbee属于系统技术，与WiFi，蓝牙等单品类产品有较大差别。一旦提到系统，随之而来的便是系统复杂度高，落地难，门槛高等说法。但是对于zigbee来说，其终极目标是能够成为单品类产品被消费者接受，与WiFi和蓝牙一样，从宜家，亚马逊，淘宝上买回来的Zigbee产品可以做到上电即能用，而且zigbee协议天生从物理层到应用层完备的协议定义，天生具备应用上互操作性。这个也是为什么CSA Alliance(前Zigbee Alliance)能够牵头和几个巨头一起开发的Matter的原因所在。</p>
<p><img src="8.png" alt=""></p>
<p>Matter协议再次给zigbee产品的单品化增加了可能性，而且是更大范围的互操作。zigbee设备通过zigbee-to-matter bridge接入到Matter Network，和其他支持Matter协议的设备实现互操作。目前成熟的zigbee 3.0设备间的互操作能力将为设备标准化接入Matter网络提供保障。</p>
<p><img src="9.png" alt=""></p>
<h1 id="国外巨头纷纷打破各自划地为营的僵局，国内的厂商是否也有动作？"><a href="#国外巨头纷纷打破各自划地为营的僵局，国内的厂商是否也有动作？" class="headerlink" title="国外巨头纷纷打破各自划地为营的僵局，国内的厂商是否也有动作？"></a>国外巨头纷纷打破各自划地为营的僵局，国内的厂商是否也有动作？</h1><p>从CHIP工作小组成立时，亚马逊，谷歌，苹果等巨头们就下定决心要把智能家居的蛋糕做大。一开始巨头们就拿出各自的技术，Google的Weave，亚马逊的Alexa，苹果的HomeKit，Zigbee的Dotdot投入到新协议的制定和开发，到后来巨头们投入大量的人力资源，纷纷在CHIP工作组不同的Tiger Team身兼要职，来推动协议开发。截止到5月已经有180多家公司以及来自这些公司的1700多名的工程师为此努力，当然以国外的厂家居多，当然也有很多国内公司有所动作。从物联网协议标准的制定到最后的产品落地，往往处在产业链上游的芯片厂商起着关键的作用，来看看看国产芯片商们的新动作。</p>
<p>乐鑫科技</p>
<p>乐鑫作为IOT WiFi芯片最大供应商之一，其在国外拥有广泛的客户群体，尤其在开源和极客圈中的热衷度极高。乐鑫科技顺势参与到Matter计划，也是帮助乐鑫从原有的WiFi领域，向其他的物联网协议进军。8月初，乐鑫发布了支持IEEE 802.15.4和Bluetooth LE(5.2)标准的ESP32-H2芯片来全力支持Matter协议，相信一定会主打WiFi，Thread以及WiFi+Thread(Board Router)来应对国内客户的需求。</p>
<p><img src="10.png" alt=""></p>
<p>奉加微电子</p>
<p>奉加微电子之前一直专注在低功耗蓝牙芯片的开发上，其第一代蓝牙芯片PHY6212上市之初，市场上的声音便是终于有了可以和欧美蓝牙芯片对标的国产蓝牙芯片。此次奉加微电子再次发力推出PHY6226，BLE+IEEE 802.15.4的双模芯片，目前PHY62xx 系列平台也是率先完成CSA联盟的Zigbee兼容性平台认证。</p>
<p><img src="11.png" alt=""></p>
<p>相信奉加微也认同巨头们推动的Matter协议能够带来更多的机会，看到PHY6226的芯片架构，可以用“短小精悍”来形容，在现有的物联网终端产品中使用可以说是恰到好处。奉加微电子软件研发中心负责人杨中奇也表示，目前智能家居中多种协议共存将是常态，Matter协议的制定会给zigbee 3.0标准产品带来更多的机会，奉加微已经对Zigbee，Thread，BLE等不同技术制定了更加丰富的产品路标计划，同时奉加微将多年在蓝牙上积累的经验对其他技术产品进行赋能，像Zigbee Direct，BLE Provisioning in Matter等需要多协议共存的技术，打造多模AIOT芯片匹配市场需求，帮助客户加快产品落地。</p>
<p>博流智能</p>
<p>博流智能作为IOT WiFi芯片的后起之秀，在如今红海般的国内WiFi芯片应用市场，凭借卓越的性能已经获得家电、照明等市场的头部客户认可。随后推出来了BL702芯片，也是BLE5.0+IEEE 802.15.4的combo芯片，加上之前的WiFi芯片，毫无疑问也是为Matter支持铆足了劲。从BL702芯片架构来看，可谓是一个不折不扣的全家桶芯片，与其他传统双模芯片相比，能想到的功能有了，没有想到的功能也有。相信博流智能在Matter上也会主打WiFi，Thread来进军国外的Matter生态，通过单品接入Matter网络。</p>
<p><img src="12.png" alt=""></p>
<p>日前通过几家主流的IEEE802.15.4和BLE的IP提供方了解到，国内的其他半导体公司也在咨询相关的IP集成到现有芯片中，希望能够从未来Matter市场中分一杯羹。</p>
<p>终端产品厂商是否都在虎视眈眈，抢夺Matter协议带来的初期红利？</p>
<p>中国的智能家居终端厂商，可以用一个字”快“来形容，都希望以最快的速度能够将支持Matter协议的产品推向市场。对于大部分终端厂商来说目前可以进入准备阶段，对Matter进行学习了解，可以通过Github(<a href="https://github.com/project-chip/connectedhomeip)上的代码更新情况进行关注，可以基于目前已经支持的硬件设备进行一些Demo的搭建。毕竟正式的Matter的开源SDK会在2021年底，1.0版本的Specification预计要在2022年初才能发布，那时候才会有比较完备的协议标准，开发环境，认证测试保障。而且处在上游的芯片厂商一定更着急，都在加班加点的开发中，希望能够提供完美的“交钥匙”Matter方案，助力产品落地。从Matter产品的生态环境和技术使用来说，Matter初期的产品生态环境一定在国外，以Google,Apple和Amazon的生态为主，技术上一定是以WiFi，Thread相关产品先接入到Matter协议，随后会有zigbee，z-wave等需要bridge协助的产品接入。" target="_blank" rel="noopener">https://github.com/project-chip/connectedhomeip)上的代码更新情况进行关注，可以基于目前已经支持的硬件设备进行一些Demo的搭建。毕竟正式的Matter的开源SDK会在2021年底，1.0版本的Specification预计要在2022年初才能发布，那时候才会有比较完备的协议标准，开发环境，认证测试保障。而且处在上游的芯片厂商一定更着急，都在加班加点的开发中，希望能够提供完美的“交钥匙”Matter方案，助力产品落地。从Matter产品的生态环境和技术使用来说，Matter初期的产品生态环境一定在国外，以Google,Apple和Amazon的生态为主，技术上一定是以WiFi，Thread相关产品先接入到Matter协议，随后会有zigbee，z-wave等需要bridge协助的产品接入。</a></p>
<p><img src="13.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>Matter协议的诞生打破了原有相同协议很难互操作，不同协议无法互操作的状态。真正实现了现有物联网在智能家居应用中的互操作，让终端能够真正享受智能家居带来的优势。</p>
</li>
<li><p>CSA联盟(前zigbee联盟)作为Matter协议的牵头方，将zigbee 3.0完备的互操作性推广到Matter协议，将给zigbee 3.0设备带来更多接入不同生态的机会。</p>
</li>
<li><p>国外巨头为Matter投入大量的资源，处在产业链上游的国产半导体厂商也不会放过这样的机会纷纷推出WiFi，zigbee，Thread，BLE芯片来匹配市场需求。</p>
</li>
<li><p>终端设备厂商开始进入Matter产品的开发，虽然是Open Source的项目，但是作为终端厂商来说还是紧跟上游芯片商的Matter方案即可。</p>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://csa-iot.org/" target="_blank" rel="noopener">https://csa-iot.org/</a></li>
<li>The Matter Alliance Could Finally FixThe Smart Home from hitechglitz.com</li>
<li>Matter Gets Everybody “Talking”fromqorvo.com</li>
</ol>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>Matter</tag>
        <tag>国产化</tag>
        <tag>CSA</tag>
      </tags>
  </entry>
  <entry>
    <title>SweynTooth爆出最新低功耗蓝牙漏洞，多家知名蓝牙芯片榜上有名</title>
    <url>/2020/05/16/SweynTooth%E7%88%86%E5%87%BA%E6%9C%80%E6%96%B0%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99%E6%BC%8F%E6%B4%9E%EF%BC%8C%E5%A4%9A%E5%AE%B6%E7%9F%A5%E5%90%8D%E8%93%9D%E7%89%99%E8%8A%AF%E7%89%87%E6%A6%9C%E4%B8%8A%E6%9C%89%E5%90%8D/</url>
    <content><![CDATA[<p>SWEYNTOOTH机构最近发布一篇报告，该报告指出，针对BLE SOC芯片的SDK进行测试发现，攻击者可以根据情况触发BLE SOC芯片协议栈死锁，崩溃，缓冲区溢出，或者完全绕过安全性。根据原厂的授权，截止到今天为止，TI，NXP，Cypress，Dialog，ST和Telink半导体已全部在列，但绝非所有SoC供应商列表都受SWEYNTOOTH影响，我们一起来看一下。</p>
<a id="more"></a>

<h1 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h1><p><strong>崩溃：</strong>此类漏洞可以通过故意触发硬故障中断使设备软件崩溃。这是由于SDK框架中某些不正确的代码行为或存储器溢出而造成，比如BLE接收缓冲区发生缓冲区溢出。崩溃发生时，软件通常会进行重新启动。但是，这种重启功能取决于BLE SoC的协议栈中是否考虑硬故障处理机制。</p>
<p><strong>死锁：</strong>死锁是会影响BLE连接，不会引起硬故障或内存损坏的漏洞。通常，它们是由于用户APP代码与SoC SDK固件之间的某些不正确同步造成用户代码陷于某个死锁等待状态。如果正确不当，则可能会导致死锁。在大多数情况下，当发生死锁时，用户手动关闭设备电源并重新打开设备电源以重新建立正确的BLE通信。</p>
<p><strong>配对安全：</strong>此漏洞是最严重的漏洞。该漏洞允许无攻击者设备绕过BLE的最新安全配对模式。绕过后，攻击者可以对设备功能进行任意读取或写入访问。而这些功能原来只能由正确交换密钥的授权用户访问。</p>
<p><img src="2.jpeg" alt=""></p>
<p>目前各大原厂已经公开发布各自的补丁修改问题。 部分终端产品也因该问题被陆续曝光，包括知名手环厂商FITBIT，北美智能锁制造商August等，但是只要产品支持BLE OTA升级功能，受影响的BLE SoC可通过软件升级方式更新原厂固件。</p>
<h1 id="高风险设备"><a href="#高风险设备" class="headerlink" title="高风险设备"></a>高风险设备</h1><p><strong>可穿戴设备：</strong>Fitbit Inspire  FitBit 2018年最新智能手表使用赛普拉斯PSoC 6作为主处理器。通过测试，它们容易受到链路层溢出和LLID死锁的影响，为了验证利用这两个问题时可穿戴设备会发生什么，我们已通过BLE主设备将恶意数据包发送到Fitbit Inspire智能手表，恶意数据包发送到设备后，有可能触发设备内存中的缓冲区溢出或使蓝牙堆栈死锁。前者的攻击（利用链路层溢出）可立即重启设备，而后者的攻击（利用LLID死锁）可禁用蓝牙广告约27秒钟，然后使智能手表重启。</p>
<p>总而言之，这些漏洞似乎只是暂时阻止了Fitbit手表的可用性。但是，链路层长度溢出本身就是一个威胁。特别是，一旦攻击者通过对固件进行反向工程来了解固件的内存布局，这种溢出就可能成为远程执行的潜在大门。在Fitbit Charge 3和Ace 2中预也会遇到同样问题(赛普拉斯PSoC 6处理器)。</p>
<p><strong>智能家居：</strong>Eve Systems的许多智能家居产品由于依赖Dialog DA14680作为主处理器。例如，Eve电灯开关，Eve Motion MKII，Eve Aqua，Eve Thermo MKII，Eve Room，Eve Lock等都容易出现溢出攻击。具体来说，有可能通过发送溢出设备接收缓冲区的特定数据包来使此类设备崩溃。当发生攻击时，用户可以立即体验其智能产品重新启动或变得不稳定。例如，对Eve Energy进行溢出攻击，当智能插头的处理器崩溃并重新启动时，智能插头上的电源就会切断。因此，我们只需在智能插座的蓝牙接收范围内发送恶意数据包，就可以暂时切断与插座电源。此外，攻击者可以使用这种简单的攻击，通过间断地切断其电源，对连接到插头的某些设备造成物理损害。</p>
<p><strong>智能锁：</strong>TheeGeeTouch是一种智能行李箱锁，可以通过手机APP进行远程锁定或解锁。该设备使用TI CC2540 SoC，在漏洞测试过程中，利用“无效连接请求”漏洞能将智能锁置于死锁状态。进行攻击时，设备会挂起，用户需要手动按下智能锁上的开机按钮才能与其进行交互，最严重的时，必须重新插入其电池以重新启动其处理器并使功能恢复正常。</p>
<p><img src="4.png" alt=""></p>
<p><img src="1.jpeg" alt=""></p>
<p>尽管很难确定存在漏洞风险的产品数量，但我们从SIG联盟的蓝牙认证清单上搜索到多款可能受影响的产品类型。下图记录了截至2020年2月8日使用受影响的产品列表总数。</p>
<p><img src="9.png" alt=""></p>
<p>物流，医疗，消费电子，智能家居，可穿戴设备和其他领域的产品也应该高度重视，我们概述了一些在SIG Bluetooth Listing上认证过的产品。</p>
<p><img src="10.png" alt=""></p>
<p>生产血糖仪的VivaCheck  Lab有很多产品都使用来DA14580。这些产品都可能容易受到L2CAP恶意数据攻击。更糟糕的是，Medtronic最新的起搏器相关的产品可能也会受到影响，为了避免使用任何可能对使用相应医疗产品的患者造成生命危险的情况，强烈建议此类公司更新固件。</p>
<p>另外恩智浦半导体的SoC KW41Z 电池供电自动包裹储物柜，KW41Z LLID死锁漏洞非常容易复现，攻击者可以简单地阻止任何人连接到包裹储物柜（除非包裹储物柜自动重启）。恩智浦已经发布了影响KW41Z的两个漏洞的补丁程序。</p>
<p>上表并不详尽，因此建议每个产品供应商将其产品的SDK固件更新到最新（如果有），或者联系其SoC供应商以查询补丁状态。</p>
<p>大多数芯片厂家已为其SoC发布了补丁包，通过下载下表中引用的供应商的最新SDK，即可获得最新补丁。另一方面，每个SoC供应商都独立联系产品供应商（使用受影响的SoC），以告知有关安全补丁的信息 。</p>
<p>在我们与Dialog联系期间，他们已经确认计划在下一个SDK版本中为受影响的SoC修补一个补丁。</p>
<p><img src="6.png" alt=""></p>
<h1 id="深入调查"><a href="#深入调查" class="headerlink" title="深入调查"></a>深入调查</h1><p>近年来，由于一些安全机制的考虑不周（例如KNOB，BlueBorne 和Invalid ECC Attack）蓝牙连接一直会受到不同程度攻击。每个SoC BLE SDK都必须先经过蓝牙认证，然后才能投放市场。但我们的发现表明，认证过程应该进行改进。我们按照Core Specification规范测试蓝牙SoC，往往会上收到了截然不同的响应，说明蓝牙芯片供应商并未严格遵循协议规范，比如，Telink的设备多次响应版本请求，这违反了核心规范[13]的[Vol 6] B部分第5.1.5节，该部分定义了HOST设备在接收主机发送的HCI指令中应仅响应一次版本请求。同样，我们测试过的所有设备都可以接受“ hopIncrement”字段值小于5的连接请求，此举违反了[Vol 6] B部分第2.3.3.1节的规定，该部分规定该字段的有效范围在5-16。此外，我们发现的所有漏洞都与[Vol 1] E部分的2.7节（对格式错误的响应）相关，该部分的说明其实已经提供了指令和一些示例来处理无效或格式错误的数据包。希望蓝牙SIG改进并显着扩展第2.7节，并向蓝牙认证中添加更多基本测试，以避免以上漏洞。</p>
<h1 id="附录：蓝牙连接全过程"><a href="#附录：蓝牙连接全过程" class="headerlink" title="附录：蓝牙连接全过程"></a>附录：<strong>蓝牙连接全过程</strong></h1><p><img src="11.jpeg" alt=""></p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Bluetooth</category>
      </categories>
      <tags>
        <tag>SweynTooth</tag>
        <tag>蓝牙漏洞</tag>
        <tag>ti</tag>
        <tag>dialog</tag>
      </tags>
  </entry>
  <entry>
    <title>从华强北GT7+智能手表看智能穿戴市场的进阶</title>
    <url>/2022/02/07/%E4%BB%8E%E5%8D%8E%E5%BC%BA%E5%8C%97GT7-%E6%99%BA%E8%83%BD%E6%89%8B%E8%A1%A8%E7%9C%8B%E6%99%BA%E8%83%BD%E7%A9%BF%E6%88%B4%E5%B8%82%E5%9C%BA%E7%9A%84%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p><img src="1.jpg" alt=""><br>第一眼看上去，以为是iWatch，答案可能不一定。今天这篇文章跟大家一起聊一聊华强北自主品牌Wtach，以下简称qbWatch（强北Watch）。</p>
<h1 id="华强北智能手表的崛起"><a href="#华强北智能手表的崛起" class="headerlink" title="华强北智能手表的崛起"></a>华强北智能手表的崛起</h1><p>华强北蓝牙智能手表qbWatch突然火热起来，源于抖音的直播卖货－T500型号，初代的性能低，屏小，显示效果差，里面做工也不是很好。随着硬件和软件的升级，后来陆续有几个型号火爆。</p>
<a id="more"></a>
<p>在电商平台或各微商朋友圈里，热销的手表外形要不像苹果的，要不就是像华为GT2的圆盘的，原来并不被很多人接受的圆盘手表突然火爆，是因为那个太空人的表盘火了。</p>
<p>华强北蓝牙智能手表主控芯片以前主要是联发科的MTK2502C和2502D两款，性能都不高，旋下蜂窝菜单都卡滞，还有尔湾芯片的，后来搭载昂瑞微的HS6621芯片的手表上市，才告别了手表卡顿，因而首款采用昂瑞微芯片的HW22成为爆款，市场经常缺货，经常涨价二三十元(HS6621为单BLE芯片，支持手表通话需要加一颗经典蓝牙，型号为AB5376A2)。后面在HS6621基础之上推出了Realtek8762D。Realtek8762D只支持单BLE芯片，所以2021年12月最新的智能手表GT7 +系列采用Realtek8762D配合上海博通集成电路的经典蓝牙芯片RB3266作为智能手表主控制器。</p>
<h1 id="qbWatch-vs-iWatch"><a href="#qbWatch-vs-iWatch" class="headerlink" title="qbWatch vs iWatch"></a>qbWatch vs iWatch</h1><p>最近在朋友推荐下购入一块华强北GT 7+ qbWatch手表，拿来和自己的iWatch 7对比如下,屏幕分辨上微略看的出正品与qbWatch之间的差异，正品的表盘更贴边框，qbWatch内嵌显示屏和表盘边框贴合没有非常紧密，其次表盘的亮度上正品亮度略高。但从动态UI显示上，尽管qbWatch表盘界面和显示动画做的非常流畅和与Apple界面相似，但是和iWatch 7在一起玩时的视觉感受上还有一段距离，qbWatch模仿的缺少了些美感。</p>
<p><img src="2.PNG" alt=""></p>
<p>接着看表盘背面，正版iWatch 7心率模块圆盘尺寸比qbWatch略大，但质感上两者几乎一致，qbWatch的心率模块灯可以亮，功能“正常”。</p>
<p><img src="3.PNG" alt=""></p>
<p>两个表盘材质几乎一致无差别，模具结构几乎一致无差别，再看看苹果特色的GUI菜单栏，qbWatch模仿的很像，界面实现的差别不大，并且GT 7+拖拽界面流程度接近正品，如上所述，使用不同的蓝牙芯片，对GUI显示延迟有很大影响，目前为止GT 7+的GUI切换拖拽几乎没时延，较为流畅。</p>
<p><img src="4.PNG" alt=""></p>
<p>外观和UI显示看不出iwatch和qbWatch的差异，我们再看软件，功能和内容，可以用“齐全”一词形容，一次充电的使用时间可超过1周（已经验证），完胜iWatch的一天一充。</p>
<p><img src="5.PNG" alt=""></p>
<p>但是，qbWatch有这些功能，并不能代表功能好，或者准确，后面会进行分析。</p>
<h1 id="国内智能穿戴设备的演进逻辑"><a href="#国内智能穿戴设备的演进逻辑" class="headerlink" title="国内智能穿戴设备的演进逻辑"></a>国内智能穿戴设备的演进逻辑</h1><p>一个智能手表可以包括好看的外表，数字化健康功能监测，多种运动记录及测评，以及作为智能手机的补充。细化到功能可以包括但不限于，表盘UI，BLE数据同步，经典蓝牙通话，基于皮肤表面的静态/动态心率检测，计步检查，运动卡路里计算，翻腕亮屏，GPS轨迹记录，以及一系列和健康，运动相关的记录和测评，防水，无线充电等。</p>
<p>13-14年开始，国内大量公司开始做智能穿戴设备，以智能手环为例，模具厂提供的不同种工模，私模，方案公司提供的记步算法，心率模块，整机PCBA大街小巷。基本的记步，卡路里计算，喝水提醒，翻腕亮屏显示，静态心率测量的工程软件框架，算法开发在一代一代的开发中迭代，相对成熟，在19-20年，智能穿戴从手环过度到带通话功能的手表过程中，更多的功能开始注入，比如GPS，TFT彩屏，UI表盘，手表蓝牙通话等。</p>
<p>站在10年长度的时间轴上，智能穿戴上的主控芯片随着市场对手表功能要求提升也在演变升级，13-14年主打CC2540/CC2541 SoC，14-15年Nordic 51822 SoC开始冒头，并且在随后的两年里通过低价的51802和更高性能的52832 SoC占据智能手环的主流市场;另一方面，Dialog14580 SoC在华米一炮打红，Dialog后续一直为小米手环提供主控蓝牙芯片。17年始，穿戴市场开始聚合，很多小品牌公司，方案公司，光学模块公司陆续退出历史舞台，知名品牌公司逐渐形成，以华为，小米，OPPO/VIVO为代表的手机厂商，以小天才儿童穿戴为代表的K12教育品牌提供商，以IDO为代表的海外手环提供商，以高驰为代表的运动手表提供商等。他们拥有完整的穿戴设备设计，各类软件算法，UI设计能力，生产制造，并且针对内容（健身，追踪，锻炼，健康）有自己的理解和功能要求。穿戴设备的系统架构趋于复杂，从单颗蓝牙SoC演进为BLE SoC + BT，中高阶甚至以高性能MCU + 超低功耗MCU + BTBLE二合一芯片，在2021年，MCU + 超低功耗MCU + WiFiBT combo方案逐渐成为主流。系统越复杂，分工越明确，大公司的穿戴事业部规模越来越大，产品体验越来越好，带动更多的消费者买单智能穿戴产品。</p>
<p>蛋糕做大，参与者都能分一杯羹。在穿戴领域模具，基本健康功能算法，UI界面逐渐成熟的市场背景下，低成本，好看的穿戴市场开始萌芽了，功能比不上上述的品牌公司，但产品的外观，UI界面好看，在拼多多，抖音，电商带货平台上可以有一席之地，有些聪明的商人看到了华强北自主知识产权的qbWatch市场。</p>
<h1 id="穿戴方案风向标"><a href="#穿戴方案风向标" class="headerlink" title="穿戴方案风向标"></a>穿戴方案风向标</h1><p>从手环到手表，硬件物料明显更加丰富，从单颗BLE SoC演变到带ST MIPI接口的高性能MCU，配合低功耗Sensorhub 阿波罗MCU，BES BTBLE，Broadcom GPS，ST的6轴传感器，心率模块等。但是今天的重点不是谈品牌客户，qbWatch的逻辑和品牌厂商不尽相同。</p>
<h2 id="硬件比拼"><a href="#硬件比拼" class="headerlink" title="硬件比拼"></a>硬件比拼</h2><p>既然是模仿世界No 1，至少外观要和iwatch一样，这个是硬性指标，至于手表内部硬件，需要由产品售价倒退。产品的售价超过299块钱的小玩意电子产品，大家购买意愿应该不会太强烈，所以降成本，降成本，降成本是核心，上述的品牌客户核心芯片物料不是该市场的主流。</p>
<p>第一颗qbWatch采用的是MTK2502，MTK家族芯片采用高度整合、超轻薄的系统封装，支持双模蓝牙功能及整合式2G Modem，微型控制器单元采用ARM v7架构，具备整合内存控制器。专为单一功能型可穿戴设备所打造的高度整合式系统单芯片，体积超轻薄，采用ARM7EJ-S架构的系统封装，具备整合联网能力。该方案的Design House应该是传统手机方案商，该芯片在屏显效果，刷新率，功耗表现上，包括需要小MCU处理传感器的地方表现并不优秀，但是够用。后续，做BLE SoC智能穿戴的公司开始琢磨，采用的BLE SoC + BT SoC二合一的方式，而不是直接拿处理器来实现硬件方案，IS2806(Irvine Semi)，和HS6621逐渐进入方案商的视线。<br><img src="6.PNG" alt=""></p>
<p>初步研究下来，这两家芯片指标直接对标Nordic52832和Nordic52840，但价格上应该有不小优势，该BLE SoC完成了所有传统手环的功能，并且模仿了部分iWatch表盘界面，但该手表缺乏语言通话功能，无奈之下，必须在方案上额外增加一颗经典蓝牙芯片，国产经典蓝牙芯片已经较为成熟，所以选择余地很大。</p>
<p>这种架构在用户体验上有问题，一个手表内部有两颗蓝牙，两个蓝牙MAC，要连两次手机，但属于无奈之举。BLE和BT差异较大，BLE芯片厂商不愿意重新开发BT芯片和协议，传统BT厂家号称可以支持BTBLE，但BLE部分功耗高，不宜于二次开发，外商的BTBLE芯片选择不多，单颗无法满足手表应用及价格过高等诸多限制因素，最终使得上述方案最为合理。</p>
<p>谈完主控，其他的传感器，电源，无线充电，NFC卡片一样需要降本。功能上，支持即可，实用性，可能不太行，这是这款手表主打的特点，性能和性价比需要做一个权衡。</p>
<h2 id="软件比拼"><a href="#软件比拼" class="headerlink" title="软件比拼"></a>软件比拼</h2><p>用安卓，还是RTOS？苹果的UI界面显示流畅度？心率检测模型和算法？健康检测模型和算法？运动模型算法和轨迹记录？任务的调度算法？该qbWatch产品，重要的是表面，不是内容，表盘的UI和系统的流程程度是软件的首要考虑因素。在安卓和RTOS的阵营，RTOS有太多优势。低配的芯片运行安卓太卡，高配的芯片运行安卓太贵；安卓功耗太高等等。但选择RTOS，如何做出类似iWatch表盘和UI显示是最大的考验。用MCU去实现表盘界面和滑动效果，离不开一个好的GUI开发框架，比如QT，LVGL等，但实现他们需要一颗高主频MCU。所以，除开IS2806(Irvine Semi)，和HS6621，Realtek 8762D也进入角俎这块应用。</p>
<p>在RTOS框架下，把不同模块插入页面调度内，形成完整的软件实体。显示靠QT或LVGL模块，BLE单独成一模块，运动监控检查组成一模块，Sensor数据读取组成一个更小的模块，被运动检测模块调用，时钟日期显示模块，等等。</p>
<p>硬件限制了软件的实施，不能指望qbWatch中传感器的精度和测量结果的准确度。心率检测模块水平参差不齐，且静态心率和动态心率算法难度相差较大，每一个细节都需要花大量，基于qbWatch的设计理念，此类功能，要从简。</p>
<p>在ID美学和表盘显示上，qbWatch可以打8分，该方案已经把BLE SoC的资源发挥殆尽，和苹果自己的主控芯片相比，实在没有可比的必要。作为299块以内的qbWatch，最豪华款可以打到80分以上。</p>
<h1 id="智能手表的设计理念"><a href="#智能手表的设计理念" class="headerlink" title="智能手表的设计理念"></a>智能手表的设计理念</h1><p><img src="7.jpg" alt=""></p>
<p>qbWatch的崛起离不开珠三角成熟的制造业，能把苹果产品的模具逆向设计出来并且实现低成本的生产，非常的了不起；加之近年来芯片行业的国产化崛起，赋能方案公司降本，在牺牲部分SoC性能的前提下，做到了与性价比的妥协，平衡。方案公司早些年在穿戴领域，在TI，Nordic，Dialog平台上积淀的软件，手机端的App，产品定义可以通过这款ID重新施展开来。从使用者的心态上来讲，拿着qbWatch，配上华强北10块钱的表带，搭配不同服饰，是个不错的选择；在消费有限范围内，感受一下iWatch，体验一把果粉，也是一个不错的选择；作为一个表哥，不想买iWatch，买个qbWatch，感受一下，同样也是一种理由。</p>
<p>如果你是国产芯片，方案供应商，华强北市场是一个可以考虑的点，TWS耳机，qbWatch手表市场捧红了几颗国产无线SoC芯片商和方案商，凭借电商平台，短视频渠道带货，借力打力，不失为一个好的市场突破点。</p>
<p>如果你需要一款智能手表，作为生活的小帮手，和运动健身，睡眠质量检测的小助手，品牌手表是好的选择之一。因为智能手表上的每一项功能，都需要大量的研发投入和算法优化，每一个功能,界面都有专门的PM进行定义，收集更新客户的反馈。经过市场的洗礼和公司的聚合，人才已经往大公司涌入，大公司也足够多的资源和金钱的投入打造更好的穿戴产品。</p>
<p>无论模仿，贴牌，还是品牌手表，除各自的主打功能外，手表ID，UI设计的人性化，人性化，人性化（重要的事情说三遍）是可以多做思考的地方，在表盘显示效果的过度，动画效果与人的交互性，包括提示音，震动效果，可以多融入人文艺术元素。今年iWatch 7的常亮屏，在待机没有抬腕前，显示屏由极简单线条勾勒出一幅待机画面，是一个亮点。它把手表，包括表盘一起作为一件随身搭配的装饰品展现给了大家，而不是留给大家一个黑乎乎的灭屏电子设备。</p>
<p>最后，肯定有人在畅想穿戴市场的蛋糕有多大？我整理了一份2016-2021年上半年全球手环手表出货量，请大家一起吃蛋糕。</p>
<p><img src="8.PNG" alt=""></p>
<p>按品牌分类（百万台）</p>
<p><img src="9.PNG" alt=""></p>
<p>按年分类（百万台）</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>知乎：华强北S6智能手表？值得买吗?M16|HW12|HW16|HW22|U98<br>知乎：品名繁多的华强北蓝牙智能手表怎么选？值得买吗?<br>知乎：目前华强北最好的手表是哪一款?</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>智能穿戴</category>
      </categories>
      <tags>
        <tag>智能穿戴</tag>
        <tag>华强北</tag>
        <tag>手表</tag>
        <tag>蓝牙</tag>
        <tag>iwatch</tag>
      </tags>
  </entry>
  <entry>
    <title>SweynTooth 蓝牙漏洞分析</title>
    <url>/2020/05/16/SweynTooth%E8%93%9D%E7%89%99%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>近年由于SIG蓝牙安全机制的考虑不周（例如KNOB，BlueBorne 和Invalid ECC Attack），蓝牙连接一直在受到不同程度攻击。每个SoC BLE SDK理应先经过蓝牙认证，然后才能投放市场，但SweynTooth机构的发现表明，蓝牙认证过程并未认真对待，因为大部分漏洞，在测试阶段可以被发现。SweynTooth按照Core Specification规范测试蓝牙SoC芯片时，往往会在被测设备上收到出乎意料的响应，说明蓝牙芯片供应商并未严格遵循协议规范，而测试机构的测试并对此进行严格把关。<a id="more"></a>比如，Telink的设备多次响应版本请求，这违反了核心规范[13]的[Vol 6] B部分第5.1.5节，该部分定义了HOST设备在接收主机发送的HCI指令中应仅响应一次版本请求。同样，SweynTooth测试过的所有设备都可以接受“ hopIncrement”字段值小于5的连接请求，此举违反了[Vol 6] B部分第2.3.3.1节的规定，该部分规定该字段的有效范围在5-16。SweynTooth发现的所有漏洞都与[Vol 1] E部分的2.7节（对格式错误的响应）相关，该部分的说明其实已经提供了指令和一些示例来处理无效或格式错误的数据包。今天我们从技术角度一一分析上文所诉的漏洞。</p>
<p><img src="0.png" alt=""></p>
<h1 id="蓝牙连接流程"><a href="#蓝牙连接流程" class="headerlink" title="蓝牙连接流程"></a>蓝牙连接流程</h1><p>下图是一个完整的蓝牙扫描发现从机设备，连接从机设备，建立数据交互通道，分发密钥，建立安全连接，profile发现，以及数据交互过程，牢记这张图表的配对流程，下面针对漏洞一一展开。</p>
<p><img src="1.png" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="Link-Layer-溢出攻击-CVE-2019-16336-CVE-2019-17519"><a href="#Link-Layer-溢出攻击-CVE-2019-16336-CVE-2019-17519" class="headerlink" title="Link Layer 溢出攻击 (CVE-2019-16336, CVE-2019-17519)**"></a>Link Layer 溢出攻击 (CVE-2019-16336, CVE-2019-17519)**</h2><p>赛普拉斯PSoC4 / 6 BLE芯片3.41 / 2.60（CVE-2019-16336）和NXP KW41Z 3.40 SDK（CVE-2019-17519）可根据LL链路层长度溢出漏洞进行攻击。这种漏洞使攻击者可以通过故意加长主机端发送的LL字段来触发从机设备缓冲区溢出。当主机LL数据包填充比其操作码规定的字节要多得多的字节，就会触发从机溢出。下图中显示了一个示例，蓝牙操作码 <strong>版本请求</strong>的长度仅为5个字节，但是当LL Length字段值增加扩展为247个字节，接收端LL 层BLE协议栈会在此类数据包时，会在内存中分配比预期更多的字节，这会导致不稳定，如果申请的缓冲空间未被释放，最终会导致从设备崩溃。</p>
<p><strong>影响：</strong>此漏洞会导致拒绝服务（DoS）。攻击者可以对产品固件进行反向工程，以植入代码远程执行。BleedingBit漏洞就是最好的体现，该漏洞在19年被爆出，该漏洞允许通过操纵LL长度字段长度，可以在某些德州仪器蓝牙芯片（Texas Instruments）设备上进行远程代码执行。</p>
<p><img src="2.png" alt=""></p>
<h2 id="Link-Layer-LLID-死锁-CVE-2019-17061-CVE-2019-17060"><a href="#Link-Layer-LLID-死锁-CVE-2019-17061-CVE-2019-17060" class="headerlink" title="Link Layer LLID 死锁 (CVE-2019-17061, CVE-2019-17060)"></a>Link Layer LLID 死锁 (CVE-2019-17061, CVE-2019-17060)</h2><p>这个漏洞可能会使Cypress（CVE-2019-17061）和NXP设备处于死锁状态（CVE-2019-17060）。如果赛普拉斯PSoC4 / 6或NXP KW41Z设备接收到一个LLID字段被清除的数据包，那么两个设备都将进入故障状态。具体而言，此状态会阻止BLE协议栈的正常工作。该漏洞的详细信息如下图所示，事实证明，这种攻击使从机协议栈LL层处理机陷入混乱，从机接收到的任何数据包都得到正确的处理或被忽略。例如，恩智浦KW41Z外设可能会响应乱序的指令到主机设备。但是，该漏洞不会触发任何硬故障，这个问题可以通过产品固件上的看门狗定时器来防止。</p>
<p><strong>影响：</strong>该问题不易被发现，并且只有在连接的过程中有可能暴露，他会使BLE产品的体验感受变差，要求用户手动对产品重启以重新建立BLE连接通信。</p>
<p><img src="3.png" alt=""></p>
<p>DA14580 SDK 5.0.4或更早版本的设备会存在Truncated L2CAP漏洞。该漏洞是由于在处理L2CAP数据包期间缺乏检查，如果数据包的总长度（即LL长度）的值小于有效载荷的L2CAP长度+ 4，则会将多余字节复制到底层接收缓冲区之外。下图显示了最大传输单元（MTU）的示例，MTU捕获一个长度请求，该请求的LL长度为7个字节，L2CAP长度为3个字节。如果从机设备收到LL长度为5个字节的恶意MTU长度请求，则L2CAP接收缓冲区将溢出两个字节（即L2CAP长度+ 4-LL长度）。因此，攻击者可以通过向外围设备发送正确的L2CAP有效数据和格式错误的超长LL数据的组合来有选择地选择要溢出的字节数。</p>
<p><strong>影响：</strong>无线电范围内的攻击者可以使用此攻击执行拒绝服务DoS并使设备崩溃。攻击者可能会估计发送需要溢出的数据包，从机设备会将某些内容写入与L2CAP接收缓冲区相邻的RAM中。在最坏的情况下，此攻击可使用Dialog DA14580对执行远程指令代码。</p>
<p><img src="4.png" alt=""></p>
<h2 id="Silent-Length-Overflow-CVE-2019-17518"><a href="#Silent-Length-Overflow-CVE-2019-17518" class="headerlink" title="Silent Length Overflow (CVE-2019-17518)"></a>Silent Length Overflow (CVE-2019-17518)</h2><p>这种攻击类似于LL链路层长度溢出。在Dialog DA14680设备中，从设备对主机恶意操作码和过长数据包会有意外响应。虽然此主机行为不符合BLE Core规范，但当发送某个具有高于预期的LL长度的数据包时，从机设备会崩溃。这表明对于某些数据包类型（如配对请求），从机接收缓冲区发生了溢出。</p>
<p><strong>影响：</strong>攻击者通常可以使用此攻击执行拒绝服务并使设备崩溃。假设根据数据包触发了缓冲区溢出，则有可能执行远程恶意代码。</p>
<h2 id="Invalid-Connection-Request-CVE-2019-19193"><a href="#Invalid-Connection-Request-CVE-2019-19193" class="headerlink" title="Invalid Connection Request (CVE-2019-19193)"></a>Invalid Connection Request (CVE-2019-19193)</h2><p>当主机设备尝试连接到TI CC2640R2 BLE-STACK SDK（v3.30.00.20及更低版本）和CC2540 SDK（v1.5.0及更低版本）时，TI提供的协议栈无法正确处理某些非法连接参数。从机设备状态机将转移到空闲状态（即无广播）。如果产品代码中的闲置状态正确处理，则设备不会再回到广告阶段。</p>
<p>在BLE连接的初始阶段，主机设备扫描从机设备的广播数据包，并发送一个连接请求数据包，其中包含诸如连接间隔和超时之类的相关参数。这两个参数分别控制从设备和主设备之间的数据包交换和超时。它们的值必须表示一个非零时间段（以毫秒为单位）。但是，如果主设备发送无效的连接请求，且其字段间隔或超时都为零时，从设备将停止通告。在接收到无效的连接请求期间，BLE协议栈将连接请求失败事件发送到应用程序代码（bleGAPConnNotAcceptable），并且在收到该失败状态后，SDK默认程序进入空闲状态，从而停止广播。</p>
<p>我们发现TI SDK中没有充分考虑接收无效参数时的状态变化，这可能导致产品开发人员无法处理该空闲状态，错误处理此状态可能导致eGeeLock等产品停止广播，因此需要用户进行重启。</p>
<p>CC2540还可以接受数据包长度小于预期长度（被截断）的连接请求，由于其数据小于预期长度，因此会自动补零，相当于<strong>Invalid Connection Request</strong> 。</p>
<p><strong>影响：</strong>攻击者可以利用下图方法，使用SoC芯片轻松被DoS攻击。此外，如果终端产品商未有效检测此类错误，进行处理，则设备可能会进入死锁状态。反过来，受到这类攻击时需要用户手动重新启动设备。</p>
<p><img src="5.png" alt=""></p>
<h2 id="Unexpected-Public-Key-Crash-CVE-2019-17520"><a href="#Unexpected-Public-Key-Crash-CVE-2019-17520" class="headerlink" title="Unexpected Public Key Crash (CVE-2019-17520)"></a>Unexpected Public Key Crash (CVE-2019-17520)</h2><p>此漏洞是在Texas Instruments CC2640R2 BLE-STACK-SDK（v3.30.00.20和更早版本）上发现的。具体地说，该漏洞存在于旧版配对过程的实施中，该过程由安全管理器协议（SMP）实施处理。当从机执行旧式配对过程时，通过在SMP配对过程开始之前发送SMP公钥包，有可能在设备内存中造成硬故障（下图步骤9）。通常，如果在配对请求/响应交换中未启用安全连接，则从机设备应忽略公共密钥的接收。在与供应商的协调过程中，德州仪器（TI）通知我们，由于从机设备接受了公钥并将其复制到空目标地址，因此触发了硬故障。通常，如果在配对请求/响应过程中正确指示了安全连接，则此地址对应于有效分配的缓冲区。</p>
<p><strong>影响：</strong>攻击者可以利用上述行为执行DoS，并可能使用CC2640R2 SoC用于主要应用程序重新启动。从好的方面来说，不可能在从机设备的内存中执行缓冲区溢出。这是因为意外的公钥始终被复制到空地址，这是攻击者无法控制的。但是此漏洞也可能导致死锁。我们对CubiTag蓝牙跟踪器的评估就证明了这一点，CubiTag产品无法正确处理该硬故障，进入来死锁状态。这要求用户手动重新启动它。</p>
<p><img src="6.png" alt=""></p>
<h2 id="Sequential-ATT-Deadlock-CVE-2019-19192"><a href="#Sequential-ATT-Deadlock-CVE-2019-19192" class="headerlink" title="Sequential ATT Deadlock (CVE-2019-19192)"></a>Sequential ATT Deadlock (CVE-2019-19192)</h2><p>在ST WB55系列 SDK V1.3.0及更早版本中，可以通过在每个连接事件中发送两个连续的ATT请求数据包使从设备死锁。通常，从主设备发送的每个ATT请求后都带有来自从设备的ATT响应（发生在连接间隔Δt的倍数时间内）。但是，恶意主设备有可能发送多个ATT请求，这些请求被连接间隔Δt分隔（下图）。这种情况下，从设备没有足够的时间响应第一个ATT请求。导致SoC片上协处理器处理异常，阻止了某些BLE事件标志被清除，该协处理器负责WB55内运行BLE SDK，导致WB55用户代码死锁。具体来说，错误代码可能会陷入while循环中，该循环等待永不结束的BLE事件。</p>
<p><strong>影响：</strong>与其他多个漏洞类似，如果供应商未在产品固件中采用看门狗，则利用此漏洞可能会使产品处于死锁状态。</p>
<p><img src="7.png" alt=""></p>
<p>在主从设备通信过程中，蓝牙4.0-4.2核心规范规定，数据包的最小和最大PDU大小应在2-39范围内， 超出此边界的数据包将被丢弃，因为它们是无效的。但是，我们发现，运行 ATMSAMB11 BluSDK Smart v6.2和更低版本的设备并非如此。，根据下图所示，如果将长度为1的L2CAP PDU发送到从设备，则设备会崩溃。</p>
<p><strong>影响：</strong>SDK中默认启用了看门狗机制，降低了死锁的风险。因此，此漏洞主要远程重新启动设备，影响设备的可用性。</p>
<p><img src="8.png" alt=""></p>
<h2 id="Key-Size-Overflow-CVE-2019-19196"><a href="#Key-Size-Overflow-CVE-2019-19196" class="headerlink" title="Key Size Overflow (CVE-2019-19196)"></a>Key Size Overflow (CVE-2019-19196)</h2><p>在所有Telink Semiconductor BLE SDK中都发现了密钥长度溢出漏洞，这会导致设备内存溢出，从而导致崩溃。该漏洞是在使用Telink SMP实现的设备配对过程中发现的多个问题的集合。</p>
<p>在配对过程开始期间，中央设备会发送一个配对请求数据包，其中包含要在配对过程结束时协商最大允许的密钥大小。密钥的最大大小被标准化为7到16个字节，并且任何与它的偏差的长度都应在配对中予以拒绝。但是，Telink外设实际上是通过使用配对响应应答主设备来接受最大为255的加密密钥。尽管存在第一个问题，但从设备在随后的配对过程的交换密钥期间拒绝配对，而没有异常行为。触发该漏洞的原因之二是由于从设备接受LL加密过程而在配对过程开始之前发生的（尽管在稍后阶段失败了）。通过结合上述两个问题，有可能迫使从设备分配在配对请求期间分配出超大密钥缓冲区长度。如下图所示，主设备发送无效的配对请求，等待配对响应并发送加密请求。该请求被接受，并且从机设备的固件尝试分配超大密钥时，内存会发生溢出。</p>
<p><strong>影响：</strong>利用此漏洞，攻击者可以启用配对支持来执行缓冲区溢出并使Telink SoC产品崩溃，这是某些BLE产品的常见做法。最坏的情况下，该攻击可能会覆盖存储加密随机数的缓冲区，从而使攻击者可以绕过加密并泄漏用户信息。</p>
<p><img src="9.png" alt=""></p>
<h2 id="Zero-LTK-Installation"><a href="#Zero-LTK-Installation" class="headerlink" title="Zero LTK Installation"></a>Zero LTK Installation</h2><p>此严重安全漏洞是密钥长度溢出的变体，它会影响使用Telink 所有的产品。当Telink从机设备接受来自主机端乱序加密请求时，使用LTK = 0（长期密钥）的就可以绕开加密过程。LTK大小通常为16个字节，是在配对请求/响应交换期间达成的，流氓主机发送带有安全连接配对指示的配对请求，并等待配对响应。接下来，主机跳过安全配对过程，直接发送加密请求，开始加密过程。</p>
<p>由于从机设备缺乏验证，因此主机从从机设备接收加密开始指令，然后将加密的加密响应发送回去，从机设备将根据会话密钥SK对其进行验证，该会话密钥SK是从有效LTK派生的。问题出现了，从机的LTK初始化为零，这就意味着主机可以轻松派生出SK，以将正确的加密的加密响应发送给从机设备，从而完成加密过程。SK（在蓝牙核心规范中被隐藏为sessionKey ）是由下述加密函数生成的。</p>
<p><em>SK</em> = <em>AES**ECB</em> ( <em>Key</em> = LTK, <em>Plaintext</em> = SKD )</p>
<p>Session Key Diversifier（SKD）是一个随机的16字节数字，通过加密请求/响应交换获得。因此，主机拥有正确的LTK即可发送带有有效SK的加密响应。</p>
<p><strong>影响：</strong>攻击者可以利用此漏洞完全绕过BLE产品的安全性，而BLE产品依赖安全连接配对来保护用户隐私。简而言之，此漏洞使攻击者可以对受保护的BLE应用程序进行完全的通信控制。</p>
<p><img src="10.png" alt=""></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>下一篇文章我们利用python实测漏洞</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>蓝牙协议</category>
      </categories>
      <tags>
        <tag>SweynTooth</tag>
        <tag>蓝牙漏洞</tag>
        <tag>ble</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Python爬取SIG官网BQB认证清单的方法和一些发现</title>
    <url>/2020/08/16/%E5%88%A9%E7%94%A8Python%E7%88%AC%E5%8F%96SIG%E5%AE%98%E7%BD%91BQB%E8%AE%A4%E8%AF%81%E6%B8%85%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E4%B8%80%E4%BA%9B%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="1.png" alt=""></p>
<h1 id="1-蓝牙认证"><a href="#1-蓝牙认证" class="headerlink" title="1. 蓝牙认证"></a>1. 蓝牙认证</h1><p>产品如果配备了蓝牙功能且要在产品外观上注明蓝牙的标识在国际市场上流通，就必须要经过蓝牙技术联盟（SIG）的严格审查和认证，必须要过BQB认证，交专利费。BQB认证包含了RF射频一致性测试、协议和profile一致性测试，下面一一讲解。</p>
<a id="more"></a>

<p>按照系统的复杂度，可以将蓝牙BQB认证产品分为 End Product，Subsystem 和 Component 三种。芯片厂家的产品的认证类型主要有 Subsystem 和 Component 两种。</p>
<blockquote>
<p>Component （组件）</p>
</blockquote>
<ul>
<li><p>最小的认证单元，不能被 DID 直接引用。</p>
</li>
<li><p>可以被 Subsystem 和 End Product 继承。</p>
</li>
<li><p>如有需要，可以修改测试项重新做测试。</p>
</li>
<li><p>可分为 Tested 和 Non-Tested 两种。</p>
</li>
</ul>
<blockquote>
<p>Subsystem（子系统）</p>
</blockquote>
<ul>
<li><p>一个完整的子系统，可以被 DID 直接引用。</p>
</li>
<li><p>可以直接做测试，也可以继承已做过认证的 Component, 但不能被 End Product 继承。</p>
</li>
<li><p>如有需要，可以修改测试项重新做测试。</p>
</li>
<li><p>可以分 Controller Subsystem ，Host Subsystem，Profile Subsystem 等。</p>
</li>
</ul>
<blockquote>
<p>End Product（终端产品）</p>
</blockquote>
<ul>
<li><p>必须是一个完整的系统，可以被 DID 直接引用。</p>
</li>
<li><p>可以直接做测试，必须同时继承 Host Component 和 Controller Component。</p>
</li>
<li><p>如有需要，可以修改测试项重新做测试。</p>
</li>
</ul>
<p>一般原始模块 需要首先申请 QDID 认证，完成认证之后会获得相应的证书，证书中会体现产品类型，型号以及 QDID 号。我们通常说的 BQB 蓝牙认证就是指 QDID。对于 终端产品 来说，QDID 是可选的，如果需要提交新的测试计划（QDID），也可以 继承（Combine） 原始模块 已经完成的部分测试项，只需要再测试增加、修改的测试项。</p>
<p><img src="2.png" alt=""></p>
<p>举个例子：对于蓝牙音箱成品来说，如果蓝牙模块已经通过 BQB 认证，蓝牙音箱这个产品可以不用重新申请认证，只要取得模块供应商的授权，就可以把产品以 DID 的形式在 BQB 网站声明。（更多关于BQB认证信息可以参阅文章：ESP32 更新多项 BQB 蓝牙认证）</p>
<h1 id="2-SIG官网爬虫"><a href="#2-SIG官网爬虫" class="headerlink" title="2. SIG官网爬虫"></a>2. SIG官网爬虫</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>爬虫思路：登陆SIG BQB Listing网站了解BQB查询方式，发现该网站可以通过两种方式查询产品BQB认证信息：<br>高级搜索功能：可以按照公司名，蓝牙版本，产品类型搜索，可以搜到2014年以后和该产品相关内容，该搜索的缺点在于必须指定特定输入条件，适合精确查找，不适合爬虫。<br>盲搜索功能：可搜索5000条DID认证信息，然后在该结果下再次搜索自己需要的产品，该搜索方式只能请求5000条数据，蓝牙联盟不想让咱知道太多。</p>
<p><img src="3.png" alt=""></p>
<blockquote>
<p>准备工具</p>
</blockquote>
<ul>
<li><p>Spyder (Python 3.7) 或者 spacevim + python插件</p>
</li>
<li><p>模块组件：requests, pandas, json, numpy, re</p>
</li>
<li><p>SIG BQB Listing: <a href="https://launchstudio.bluetooth.com/Listings/Search" target="_blank" rel="noopener">https://launchstudio.bluetooth.com/Listings/Search</a></p>
</li>
</ul>
<blockquote>
<p>设计流程</p>
</blockquote>
<ul>
<li><p>REQUEST <a href="https://launchstudio.bluetooth.com/Listings/Search" target="_blank" rel="noopener">https://launchstudio.bluetooth.com/Listings/Search</a></p>
</li>
<li><p>文本数据清洗</p>
</li>
<li><p>数据转换：Pandas DataFrame</p>
</li>
<li><p>Pandas 数据处理，数据分析</p>
</li>
</ul>
<h2 id="爬虫实施"><a href="#爬虫实施" class="headerlink" title="爬虫实施"></a>爬虫实施</h2><p>构建request payload，requests获取数据</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">payload = &#123;<span class="string">"searchString"</span>:<span class="string">''</span>,</span><br><span class="line">           <span class="string">"searchQualificationsAndDesigns"</span>:<span class="string">'true'</span>,</span><br><span class="line">           <span class="string">"searchDeclarationOnly"</span>:<span class="string">'true'</span>,</span><br><span class="line">           <span class="string">"searchEndProductList"</span>:<span class="string">'false'</span>,</span><br><span class="line">           <span class="string">"searchPRDProductList"</span>:<span class="string">'true'</span>,</span><br><span class="line">           <span class="string">"searchMyCompany"</span>:<span class="string">'false'</span>,</span><br><span class="line">           <span class="string">"productTypeId"</span>:<span class="number">0</span>,</span><br><span class="line">           <span class="string">"specName"</span>:<span class="number">0</span>,</span><br><span class="line">           <span class="string">"bqaApprovalStatusId"</span>:-<span class="number">1</span>,</span><br><span class="line">           <span class="string">"bqaLockStatusId"</span>:-<span class="number">1</span>,</span><br><span class="line">           <span class="string">"listingDateEarliest"</span>:<span class="string">""</span>,</span><br><span class="line">           <span class="string">"listingDateLatest"</span>:<span class="string">""</span>,</span><br><span class="line">           <span class="string">"userId"</span>:<span class="number">0</span>,</span><br><span class="line">           <span class="string">"memberId"</span>:<span class="string">''</span>,</span><br><span class="line">           <span class="string">"layers"</span>:[],</span><br><span class="line">           <span class="string">"maxResults"</span>:<span class="number">15000</span> &#125;</span><br><span class="line"></span><br><span class="line">URL = <span class="string">"https://launchstudio.bluetooth.com/Listings/Search"</span></span><br><span class="line">r = requests.post(URL,<span class="keyword">data</span> = payload)</span><br></pre></td></tr></table></figure>

<p>SIG BQB Listing网页采用前后端框架，一次搜索后前端Web已经拿到5000条数据内容，但Web做了处理分页显示，所以爬虫时不需要在前端浪费时间。在爬虫处理上，只需要按Payload格式要求REQUEST后台获取数据。</p>
<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>5000条到手数据经过数据清洗，按照Jason格式转换为Pandas认识的DataFrame，得到DataFrame数据后就可以开启数据处理和数据分析。数据包含下图12类信息，第三章的数据分析依据该12类中的某几类聚合以及一定条件过滤和计算进行数据提取。</p>
<p><img src="5.png" alt=""></p>
<h1 id="3-BQB-Listing-数据分析"><a href="#3-BQB-Listing-数据分析" class="headerlink" title="3. BQB Listing 数据分析"></a>3. BQB Listing 数据分析</h1><p>根据第一小节讲到的内容，一个DID是一家SIG会员公司(Associate级别会员，Adopter级别会员)购买的唯一序列号，该公司利用DID和引用QDID声明自己产品符合蓝牙技术规范，作为公开出售的证明，该DID可以List一个或者多个同类终端产品。因为SIG官网限制了获取后台数据的数量，爬到的5000条DID信息涉及2019年3月19日至2020年5月4日，总共List的终端产品共有47788款产品，该数据包含蓝牙终端产品和蓝牙芯片软硬件的认证总和。</p>
<h2 id="蓝牙版本"><a href="#蓝牙版本" class="headerlink" title="蓝牙版本"></a>蓝牙版本</h2><p>过去一年5000个DID认证号中蓝牙版本以5.0居多，排名前三位的认证版本是蓝牙5.0，蓝牙4.2以及蓝牙5.1。值得一提的是已经有部分芯片原厂公司拿到蓝牙5.2的认证，认证类型主要分布在PYH，HOST与软件SDK，涉及Qualcomm, ARM, Nordic, SilconLab, PixArt, Realtek, HiSilicon(Hi1105C20)等公司产品，HiSilicon的Hi1105C20这颗蓝牙5.2芯片值得关注。</p>
<p><img src="6.png" alt=""></p>
<h2 id="公司类型"><a href="#公司类型" class="headerlink" title="公司类型"></a>公司类型</h2><p>过去一年共计2264家公司认证了蓝牙产品（购买DID序列号）。根据统计，购买超过10个DID序列号的公司共计有52家，三星作为购买DID最多的公司，总计购买230个DID，其次是Haiwei共计购买88个DID，小米共计购买79个DID，排在第四名哈曼，共计购买69个DID号。第一章节中介绍，一个DID可以List多个终端产品，根据这一规则统计，去年一年共计47788个产品拥有蓝牙认证，在市场进行销售（实际认证数量会少于47788，因为部分认证来至芯片原厂，不属于终端产品）。但是，实际市场流通的蓝牙产品种类应该远远多于47788，因为有很多产品是没有通过认证，直接在市场进行销售。</p>
<p><img src="7.png" alt=""></p>
<h2 id="产品类型"><a href="#产品类型" class="headerlink" title="产品类型"></a>产品类型</h2><p>我们聚合认证清单超过200个的公司和申报名字的列表，华为名列前茅。通过产品认证的Name可以大致推断，手机类产品是蓝牙认证数量最多，其次手机配件产品，第三是TV产品，比较意外的是灯控认证的数量非常可观，Zumtobel是一家欧洲有名的灯光公司，Aurora Lighting是一家本土灯光布置公司，查找详细信息发现两家公司在灯控上使用的蓝牙技术并不是Mesh协议，而是传统的BT4.2协议。</p>
<p><img src="8.png" alt=""></p>
<p>在上一张直观图，华为认证List的产品数量占了半壁江山，结合DID数据分析可以发现一个有趣的现象，华为直接购买的DID数并不是最多，但是华为引用QDID，LIST产品数量远远高于三星，可以看出华为的两个现象，1.最大化利用已购买的DID 2. 产品形态丰富，种类繁多。</p>
<p><img src="9.png" alt=""></p>
<h2 id="音频原厂动向"><a href="#音频原厂动向" class="headerlink" title="音频原厂动向"></a>音频原厂动向</h2><p>根据网上整理的一份2019年TWS耳机芯片原厂报告，跟踪了这些公司在2019年度蓝牙的研发认证进展情况，高通(CSR)全系列产品升级至5.1或者5.2，Huawei芯片拭目以待，Cypress产品包含了部分BLE产品认证，其他原厂中不乏蓝牙5.2认证芯片。需要说明的是，Apple认证的产品并不是TWS耳机，有两个属于在Macbook和IOS HOST端协议的认证，另个一个Mesh属于手表上的认证。</p>
<p><img src="10.png" alt=""></p>
<h2 id="外资Bluetooth-LE原厂动向"><a href="#外资Bluetooth-LE原厂动向" class="headerlink" title="外资Bluetooth LE原厂动向"></a>外资Bluetooth LE原厂动向</h2><p>Nordic全线产品升级SDK，认证蓝牙5.1，5.2协议，但是没有看到关于新芯片52820的相关认证信息。NXP第二，认证数据包括刚刚收购Marvell的产品。Dialog 14531已经完成controll和host认证，应该很快会投放市场。</p>
<p><img src="11.png" alt=""></p>
<h2 id="国产蓝牙原厂动向"><a href="#国产蓝牙原厂动向" class="headerlink" title="国产蓝牙原厂动向"></a>国产蓝牙原厂动向</h2><p>共计17家国产半导体在过去的一年中提交芯片认证相关DID，每家公司认证的产品数量不多，涉及芯片个数相比外资企业有一定差距，但是有这么多的公司还是让我感受到了国产半导体的力量。比较意外Telink去年一年新产品认证不多，只有三个，一个模块认证，一个controller和一个host的5.0升级认证，没有新产品以及新的协议栈认证。</p>
<p><img src="12.png" alt=""></p>
<h2 id="蓝牙芯片原厂动向"><a href="#蓝牙芯片原厂动向" class="headerlink" title="蓝牙芯片原厂动向"></a>蓝牙芯片原厂动向</h2><p>芯片原厂正在积极升级新的协议标准以及给新的芯片做认证。从数据分析来看，认证蓝牙5.1版本共计57个，排名第一；5.0版本的芯片认证排名第二，共计30个；排名第三的是蓝牙5.2版本，共计22个。目前尚不清楚已认证的蓝牙5.2版本芯片是否支持LE Audio和LC3音频编解码。</p>
<p><img src="13.png" alt=""></p>
<h1 id="4-几点感悟"><a href="#4-几点感悟" class="headerlink" title="4. 几点感悟"></a>4. 几点感悟</h1><ul>
<li><p>蓝牙联盟的商业模式和运营模式值得国内科技公司学习。</p>
</li>
<li><p>标准制定组织通过技术授权，赚的盆满钵满。</p>
</li>
<li><p>感谢技术大牛们的科研成果，蓝牙新技术层出不穷。</p>
</li>
<li><p>芯片原厂竞争异常激烈，除了比拼芯片功能和射频性能，无线协议栈的开发和维护升级也是一个非常庞大复杂的工作。</p>
</li>
<li><p>人生苦短，我用PYTHON，274行代码完成爬虫+数据分析。</p>
</li>
</ul>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Bluetooth</category>
      </categories>
      <tags>
        <tag>蓝牙认证</tag>
        <tag>BQB</tag>
        <tag>爬虫</tag>
        <tag>蓝牙厂家</tag>
        <tag>国产蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title>从端到边缘，无线技术赋能AI边缘计算处理器</title>
    <url>/2022/02/07/%E4%BB%8E%E7%AB%AF%E5%88%B0%E8%BE%B9%E7%BC%98%EF%BC%8C%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E8%B5%8B%E8%83%BDAI%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<p><img src="1.png" alt=""></p>
<p>无线技术赋能边缘计算处理器，本文不一定讲的清楚，本人视野有一定产业局限性，故有些问题可能存在以偏概全的嫌疑。文章以项目为起点，试图以点带线，其实是项目过程中的思考和与同行交流的思想碰撞。</p>
<a id="more"></a>


<h1 id="AI视觉云台实现逻辑"><a href="#AI视觉云台实现逻辑" class="headerlink" title="AI视觉云台实现逻辑"></a>AI视觉云台实现逻辑</h1><p>因甲方要求，需要搭建一个视觉跟踪云台，涉及视觉跟踪，手上现有SoC运算能力有限，加上片上硬件资源没有支持MIPI-CSI接口，没办法直接挂摄像头，手边正好有块树莓派板子，直接用上。</p>
<p>Raspberry Pi 树莓派目前已经出到第四代4B版本，我使用的为第四代4B版本。项目上使用到树莓派如下几个部分：CPU，Wi-Fi图传和SSH，MIPI-CSI接口，GPIO控制。</p>
<p><img src="2.png" alt="Raspberry Pi 4b"></p>
<p>相对于树莓派3，树莓派4的CPU性能已经得到极大提升（3x），考虑到人脸跟踪，730P@30Fps的图像采集，顺手加上手边的算力棒加速人脸识别推理工作，算力棒为Intel neural compute stick 2，算力大概在4T。</p>
<p><img src="3.png" alt="Intel Nerual Compute Stick 2"></p>
<p>下一步需要做摄像头跟踪，此阶段需要搭建云台系统，根据识别的人脸位置与图片中心位置差值，调整云台对准人脸，所使用的云台为两个SG-90舵机组成(不要买大功率舵机，树莓派驱动电流有限，带不动)。</p>
<p>整个项目先是在树莓派上使用PYTHON3调试，OpenCV +Intel OpenVINO 来做视频数据采集和人脸识别（人脸识别模型库采用OpenVINO已经训练好的模型，不需要自己再训练），另起两个线程来做云台pan，tilt差值和pid调节。</p>
<p>调试过程中，发现伺服电机PID调节和控制非常棘手，树莓派输出的pwm不稳，其他Python任务执行过程会影响pwm的输出，抖动严重，PID调参抖动大，图像差值和pan，tilt无法形成闭环回路，错误的pid输出，导致云台输出位置错误，位置错误反过来又影响摄像头人脸捕捉。</p>
<p><img src="4.png" alt="pid 调节器"></p>
<p>解决办法是拿一个MCU，TI TM4C Launchpad开发板处理伺服电机的驱动和PID调节。在实时控制方面，MCU的优势非常明显，硬件pwm，精准设置，调整方便，输出实时。反应在舵机上的表现为给定目标占空比，舵机移动到该坐标位置不抖动，在电机驱动调试完毕之后利用串口调试助手调节x轴y轴的PID参数，一切准备就绪后指定串口数据包格式，准备接收树莓派发送过来的pan tilt位置差值。（Demo中加了一个电池包，用来给树莓派系统供电，省去Type C有线供电）。</p>
<p><img src="5.png" alt="云台实物"></p>
<p>硬件上，树莓派CPU负责视频采集，Intel Movidius 算力棒负责每帧图片的人脸推理，MCU协处理器负责云台伺服电机控制，树莓派4B片上 Wi-Fi模块负责图传到云端显示以及SSH。</p>
<p>软件上，在linux 系统用python3完成整个控制逻辑，cv模块负责视频数据采集，人脸推理，计算人脸位置差值，uart发送云台位置指令给MCU；MCU采用C编程，设置PWM频率及占空比，编程增量PID控制程序，调试x轴，y轴PID 参数Kp，Ki，Kd，等待串口终端树莓派的指令。</p>
<h1 id="边缘计算需求"><a href="#边缘计算需求" class="headerlink" title="边缘计算需求"></a>边缘计算需求</h1><p>云台搭建并不算复杂，但该视觉项目需求具有AIoT产品代表性：对物理世界进行数据采集，AI深度学习推理&amp;挖掘，GPIO，PWM实时控制，毫秒级微秒级定时器设置，Wi-Fi 蓝牙无线传输。场景落地例如，人脸识别考勤机，门禁系统，停车系统轧机，视频监控，门铃等。本地端的处理器完成视频&amp;音频采集+处理，MCU控制输出，HMI显示，以及AI，深度学习，推理（训练一般不会放在边缘计算节点），此类应用均可以归纳称为边缘计算应用行列。</p>
<h1 id="边缘计算-物联网无线"><a href="#边缘计算-物联网无线" class="headerlink" title="边缘计算 + 物联网无线"></a>边缘计算 + 物联网无线</h1><p>科学技术在AI，算法，集成芯片领域的发展迅猛，呈几何形增长。为适应市场需要，ARM阵营在处理器内核上推新不断，A35，A53，A55，A72，A73，RISC-V也不甘示弱。芯片厂家结合自身需求，推出单核，双核，三核处理器以提高整体运算速度，在通用ARM/RISC-V内核无法满足深度学习，神经网络计算时，AIoT应用下的ARM/MIPS + GPU/NPU（0.5T-10T）的边缘计算处理器孕育而生。</p>
<p><img src="6.png" alt="不同处理器单元能效比"></p>
<p>当技术不再成为思想的桎梏，出现了很多企业迅猛发展的现象级案例，下面从三个方向举例说明：</p>
<h2 id="大音频"><a href="#大音频" class="headerlink" title="大音频"></a>大音频</h2><p>智能音响算大音频市场的代表产品之一，以阿里，百度，小米互联网公司为代表。功能需求包括麦克风阵列识音，TTS，ASR，AEC，Codec编解码，经典蓝牙播放，Wi-Fi云播放等。内核处理器统筹任务调度，控制数据流向，驱动WiFi,BT协议，协处理器DSP用来处理音频相关算法和音频编解码，Wifi BT COMBO芯片负责无线数据传输。</p>
<p><img src="7.png" alt="Amlogic 113l A35 + DSP"></p>
<p>TWS耳机系统架构和智能音箱有差异，TWS耳机通常以单颗SoC解决方案完成，（相比于智能音箱以Processor + Wifi/BT COMBO + Linux），片上SoC运行RTOS系统，内部架构可细分为 MCU + DSP + RF Radio。</p>
<p><img src="8.png" alt="QCC300x 内部框图"></p>
<h2 id="大视频"><a href="#大视频" class="headerlink" title="大视频"></a>大视频</h2><p>网络摄像机算是近两年视频监控行业出彩的产品。处理器负责视频采集，ISP对图像信号优化处理，视频经过H.264，H.265 1080p@30fps编码后，通过有线或者无线进行图传。在AI算法的驱使下，单目，双目人脸识别，3D结构光姿态识别等应用要求处理器能在本地完成图像比对，推理，NPU AI深度学习推理，控制执行单元。</p>
<p><img src="9.png" alt="Hi3518ev300 A53 + GPU"></p>
<p>低功耗门铃产品侧重强调处理器毫秒级快速唤醒进行视频抓拍，微安级低待机功耗，微安级别WiFi长连接的功耗，ISP图像处理等，但目前主流几家低功耗摄像机芯片厂家在原有架构上加上NPU单元，努力适应AI行业新的发展方向，君正的T40更是加上了一颗RISC-V，可以作为一颗实时MCU，管理整个系统。</p>
<p><img src="10.png" alt="Ingenic T40  MIPS CPU + NPU + RISC-V"></p>
<h2 id="大感知"><a href="#大感知" class="headerlink" title="大感知"></a>大感知</h2><p>手表，温控器，门锁，各类传感器，门磁，烟雾探测器，定位器，胎心监都可算做大感知类产品，所涉及的系统已经由采用MCU + RF Radio 的SoC满足，Nordic，NXP，Siliconlab，TI 等。</p>
<p><img src="11.png" alt="Nordic 5340 2 x M33"></p>
<p>AIoT处理器厂家不断在性能，晶片面积，功耗三方面进行权衡，优化与迭代，随之而来是需要更合适的无线产品与之匹配，多协议，低功耗，高集成，易开发，SoC或者COMBO。</p>
<h1 id="从端到边缘，无线技术赋能AI处理器"><a href="#从端到边缘，无线技术赋能AI处理器" class="headerlink" title="从端到边缘，无线技术赋能AI处理器"></a>从端到边缘，无线技术赋能AI处理器</h1><p><img src="12.png" alt="端 - 边缘计算 - 云"></p>
<p>Bluetooth, Zigbee, 2.4G私有协议，Sub 1G私有协议，Lora为代表的无线网络典型应用集中在端上，在边缘多以Gateway的产品形态呈现；Wi-Fi SoC和Wi-Fi BT COMBO芯片可在端或者边缘呈现，在端处，以视频类应用为主；在边缘计算产品中，多与Linux，安卓系统配合，Wifi起到联网数据传输和蓝牙起到音频传输作用。</p>
<p>AIoT边缘计算芯片 片上系统继续在RTOS和Linux系统的博弈中，新的架构和更强的性能对无线产品提出更高的要求：Wi-Fi 和主控间的适配采用SDIO还是SPI；协议栈在主控还是在SoC上；Wifi 5G 频段支持与否；IoT WI-FI 6的应用场景在哪里落地；COMBO芯片能否支持CHIP（Alliance，Zigbee）；COMBO芯片是否能释放内部内核给用户二次开发；如何支持LE AUDIO等等。在AIoT SoC芯片更迭百花齐放的同时，无线芯片亦在架构之争当中；新的产品将孕育新的无线模块生意模式以及新的IDH，产业链在内卷中升级。</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>主控</tag>
        <tag>PID</tag>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝牙协议框架梳理</title>
    <url>/2020/05/24/%E8%93%9D%E7%89%99%E5%8D%8F%E8%AE%AE%E6%A1%86%E6%9E%B6%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h1 id="蓝牙基本概念"><a href="#蓝牙基本概念" class="headerlink" title="蓝牙基本概念"></a>蓝牙基本概念</h1><h2 id="Piconet"><a href="#Piconet" class="headerlink" title="Piconet"></a>Piconet</h2><p>在蓝牙设备没有跟其他蓝牙设备连线的时候，它自己属于一个piconet。当有连线后，piconet里有两种角色：master 和 slave。发起连线的一方是master，被连接的一方是slave。slave会以master的时钟为参照，以625us为时间单位，与master进行数据收发。每一个piconet里，一个master最多有7个slave。</p>
<a id="more"></a>
<p><img src="1.png" alt=""></p>
<h2 id="PHY-Mode"><a href="#PHY-Mode" class="headerlink" title="PHY Mode"></a>PHY Mode</h2><p><strong>LE</strong>： LE采用频分多址（FDMA）和时分多址（TDMA），在FDMA中使用了40个（40）物理信道，相隔2 MHz。37,38,39用作主要广播，而另外37个通道用作数据渠道或者次要广播通道。</p>
<p><strong>Basic Rate</strong>: 最基本的一种模式，采用GFSK，传输速率是 1Mb/s。</p>
<p><img src="12.png" alt=""></p>
<p><strong>Enhanced Data rate</strong>: 增强模式，传输速率是 2Mb/s （π/4-DQPSK）或 3Mb/s（8DPSK），这种模式有两种编码。</p>
<h2 id="BT-clock"><a href="#BT-clock" class="headerlink" title="BT clock"></a>BT clock</h2><p>Clock是蓝牙通信最最基础的一个概念，clock定义了通信的时空范围，定义了这个Piconet时空的坐标系，只有在同一个坐标系里，网络内的各个角色才能相互了解对方的时间线，才知道什么时候发包，什么时候收包。<br>BT clock是个28bit的计数器，每tick一次是312.5us，所以总共有 (2^28 -1)个tick，算一下大约是(2^28-1)*312.5us/10^6/3600 = 23.3个小时后clock会翻转。</p>
<p>针对Clock有几个重要概念：</p>
<blockquote>
<p>CLK0, 312.5us，是一个tick<br>CLK1, 625us, 是一个slot<br>CLK2, 1.25ms, 是一个frame（做一次TX 和 RX）<br>CLK12, 1.28s.<br>Clock的精确度要求为 +/-250ppm 和 +/-20ppm</p>
</blockquote>
<p>蓝牙tx,rx会按时隙为节拍通信，数据以625us一个时隙作为最小单元，有些数据包会超过一个时隙，最多可持续5个时隙。</p>
<p><img src="11.png" alt=""></p>
<p>对于一个连接中的两个设备中，对于主设备，slave_offset应为零，因为CLK与其自身的本地时钟CLKN相同。每个从机应在其CLKN上添加一个适当的slave_offset，以使CLK对应于主机的CLKN，使得主从时钟保持同步尽管设备中的所有CLKN均以相同的标称速率运行，但相互漂移会导致CLK不准确。因此，必须定期更新从机中的偏移，以使CLK大约等于主机的CLKN</p>
<p><img src="4.png" alt=""></p>
<h2 id="Physical-Channel（信道）"><a href="#Physical-Channel（信道）" class="headerlink" title="Physical Channel（信道）"></a>Physical Channel（信道）</h2><p>Spec总共有定义如下5种channel</p>
<blockquote>
<ul>
<li>Basic piconet physical channel</li>
<li>Adapted piconet physical channel</li>
<li>Page scan physical channel</li>
<li>Inquiry scan physical channel</li>
<li>Synchronization scan physical channel</li>
</ul>
</blockquote>
<p>以Basic piconet physical channel为例，在建立连线后，Slave会以Mater的clock为准。Master和Slave以一个slot为单位进行Tx和Rx，Master在clock为偶数时发包，Slave在clock为偶数时收包，如下图所示</p>
<p><img src="3.png" alt=""></p>
<h1 id="蓝牙核心框架"><a href="#蓝牙核心框架" class="headerlink" title="蓝牙核心框架"></a>蓝牙核心框架</h1><h2 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h2><p><img src="5.png" alt=""></p>
<p>蓝牙核心框架信息量非常大，基本把蓝牙的构架和数据传输方向描述的非常清楚，绿色框图部分是Radio, 蓝牙射频，基带和链路管理放在该部分完成，红色部分称为Host端，俗称蓝牙协议。</p>
<p>Radio分为经典蓝牙，低功耗蓝牙和AMP。我们主要看LE Controller，顺带提一下BR/EDR。</p>
<p><strong>Controller和Host直接的数据传输有几种方式：C/E，SCO，ACL，ISO。</strong></p>
<blockquote>
<p>• Synchronous Connection-Oriented (SCO) logical transport<br>• Extended Synchronous Connection-Oriented (eSCO) logical transport<br>• Asynchronous Connection-Oriented (ACL) logical transport<br>• Active Slave Broadcast (ASB) logical transport<br>• Connectionless Slave Broadcast (CSB) logical transport.</p>
</blockquote>
<p>简单来说C/E是HOST和Controller通信方式之一，Command用于下发指令，Event是Host用于接收controller上报指令，SCO和eSCO是经典蓝牙下用于音频传输，ACL为异步数据传输（没有严格同步时间要求的数据传输方式），ISO是蓝牙5.2的最新规范的大数据传输通道，分为基于连接的数据流传输和基于广播的数据流传输。上图中灰色的箭头表示控制指令的传输路径，黑体箭头表示数据流向。</p>
<blockquote>
<p>Synchronous Connection Oriented (SCO)</p>
<ul>
<li>Circuit switched typically used for voice</li>
<li>Symmetric, synchronous service</li>
<li>Slot reservation at fixed intervals</li>
<li>Point-to-point</li>
</ul>
<p>Asynchronous Connectionless Link (ACL)</p>
<ul>
<li>Packet switched</li>
<li>Symmetric or asymmetric, asynchronous service<br>Polling mechanism between master and slave(s)</li>
<li>Point-to-point and point-to-multipoint</li>
</ul>
</blockquote>
<p>以设置LE设备广播为例，LE 设备上电后，host发送reset command重启蓝牙设备，发送广播参数command，配置广播内容，使能广播command，完成蓝牙设备的广播设置command。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">########################################################</span><br><span class="line">## Legacy Adv Command</span><br><span class="line">########################################################</span><br><span class="line">#reset</span><br><span class="line">Send_HCI_Reset</span><br><span class="line">Wait_HCI_Command_Complete_Reset_Event <span class="number">5000</span>, any, HCI_Reset, <span class="number">0x00</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">set</span> Adv parameter</span><br><span class="line">Send_HCI_LE_Set_Advertising_Parameters <span class="number">800</span>, <span class="number">800</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="string">"01:02:03:04:05:06"</span>, <span class="string">"0x07"</span>, <span class="string">"0x00"</span></span><br><span class="line">Wait_HCI_Command_Complete_LE_Set_Advertising_Parameters_Event <span class="number">5000</span>, any, HCI_LE_Set_Advertising_Parameters, </span><br><span class="line"></span><br><span class="line"># <span class="keyword">set</span> Adv <span class="keyword">data</span> Payload</span><br><span class="line">Send_HCI_LE_Set_Advertising_Data <span class="number">0x10</span>, <span class="string">"00:01:02:03:04:05:06:07:08:09:0A:0B:0C:0D:0E:0F"</span></span><br><span class="line">Wait_HCI_Command_Complete_LE_Set_Advertising_Data_Event <span class="number">5000</span>, any, HCI_LE_Set_Advertising_Data, </span><br><span class="line"></span><br><span class="line"># <span class="keyword">set</span> Scan rsp <span class="keyword">data</span> Payload</span><br><span class="line">Send_HCI_LE_Set_Scan_Response_Data <span class="number">0x10</span>, <span class="string">"00:01:02:03:04:05:06:07:08:09:0A:0B:0C:0D:0E:0F"</span></span><br><span class="line">Wait_HCI_Command_Complete_LE_Set_Scan_Response_Data_Event <span class="number">5000</span>, any, HCI_LE_Set_Scan_Response_Data, </span><br><span class="line"></span><br><span class="line"># enable adv</span><br><span class="line">Send_HCI_LE_Set_Advertise_Enable <span class="number">0x01</span></span><br><span class="line">Wait_HCI_Command_Complete_LE_Set_Advertise_Enable_Event <span class="number">5000</span>, any, HCI_LE_Set_Advertise_Enable, </span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>完整的Command/Event交互LOG如下:</p>
<blockquote>
<p>20:23:26.378 <strong>* Script Started: “C:\Users\xcoder\Documents\Texas Instruments\HCI TESTER\hci_tester\controller scripts\adv.txt” *</strong><br>20:23:26.378 –<br>20:23:26.378 Packet “HCI_Reset”, Opcode 0x0c03<br>20:23:26.378 –<br>20:23:26.378 Outgoing Dump:<br>20:23:26.378     0000: 01 03 0c 00                                     ….<br>20:23:26.398 Incoming Dump:<br>20:23:26.398     0000: 04 0e 04 01 03 0c 00                            …….<br>20:23:26.398 –<br>20:23:26.398 Packet “HCI_Command_Complete_Reset_Event”, Opcode 0x0c03<br>20:23:26.398 Parameters:<br>20:23:26.398 | Number HCI commands : 0x01<br>20:23:26.398 | Command Opcode      : 0x0c03<br>20:23:26.398 | Status              : 0x00 (Success)<br>20:23:26.398 –<br>20:23:26.398 –<br>20:23:26.398 Packet “HCI_LE_Set_Advertising_Parameters”, Opcode 0x2006<br>20:23:26.398 Parameters:<br>20:23:26.398 | Advertise Min Interval    : 800<br>20:23:26.398 | Advertise Max Interval    : 800<br>20:23:26.398 | Advertising Type          : 0x00 (Connectable Undirected Event)<br>20:23:26.398 | Own Address Type          : 0x00 (Public Device Address)<br>20:23:26.398 | Direct Address Type       : 0x00 (Public Device Address)<br>20:23:26.398 | Direct Address            : “01:02:03:04:05:06”<br>20:23:26.398 | Advertising Channel Map   : 0x07<br>20:23:26.398 | Advertising Filter Policy : 0x00<br>20:23:26.398 –<br>20:23:26.398 Outgoing Dump:<br>20:23:26.398     0000: 01 06 20 0f 20 03 20 03 00 00 00 06 05 04 03 02 .. . . ………<br>20:23:26.398     0010: 01 07 00                                        …<br>20:23:26.418 Incoming Dump:<br>20:23:26.418     0000: 04 0e 04 01 06 20 00                            ….. .<br>20:23:26.418 –<br>20:23:26.418 Packet “HCI_Command_Complete_LE_Set_Advertising_Parameters_Event”, Opcode 0x2006<br>20:23:26.418 Parameters:<br>20:23:26.418 | Number HCI commands : 0x01<br>20:23:26.418 | Command Opcode      : 0x2006<br>20:23:26.418 | Status              : 0x00 (Success)<br>20:23:26.418 –<br>20:23:26.418 –<br>20:23:26.418 Packet “HCI_LE_Set_Advertising_Data”, Opcode 0x2008<br>20:23:26.418 Parameters:<br>20:23:26.418 | Data Length      : 0x10<br>20:23:26.418 | Advertising data : “00:01:02:03:04:05:06:07:08:09:0A:0B:0C:0D:0E:0F”<br>20:23:26.418 –<br>20:23:26.418 Outgoing Dump:<br>20:23:26.418     0000: 01 08 20 11 10 00 01 02 03 04 05 06 07 08 09 0a .. ………….<br>20:23:26.418     0010: 0b 0c 0d 0e 0f                                  …..<br>20:23:26.428 Incoming Dump:<br>20:23:26.428     0000: 04 0e 04 01 08 20 00                            ….. .<br>20:23:26.428 –<br>20:23:26.428 Packet “HCI_Command_Complete_LE_Set_Advertising_Data_Event”, Opcode 0x2008<br>20:23:26.428 Parameters:<br>20:23:26.428 | Number HCI commands : 0x01<br>20:23:26.428 | Command Opcode      : 0x2008<br>20:23:26.428 | Status              : 0x00 (Success)<br>20:23:26.428 –<br>20:23:26.428 –<br>20:23:26.428 Packet “HCI_LE_Set_Scan_Response_Data”, Opcode 0x2009<br>20:23:26.428 Parameters:<br>20:23:26.428 | Data Length : 0x10<br>20:23:26.428 | Data        : “00:01:02:03:04:05:06:07:08:09:0A:0B:0C:0D:0E:0F”<br>20:23:26.428 –<br>20:23:26.428 Outgoing Dump:<br>20:23:26.428     0000: 01 09 20 11 10 00 01 02 03 04 05 06 07 08 09 0a .. ………….<br>20:23:26.428     0010: 0b 0c 0d 0e 0f                                  …..<br>20:23:26.448 Incoming Dump:<br>20:23:26.448     0000: 04 0e 04 01 09 20 00                            ….. .<br>20:23:26.448 –<br>20:23:26.448 Packet “HCI_Command_Complete_LE_Set_Scan_Response_Data_Event”, Opcode 0x2009<br>20:23:26.448 Parameters:<br>20:23:26.448 | Number HCI commands : 0x01<br>20:23:26.448 | Command Opcode      : 0x2009<br>20:23:26.448 | Status              : 0x00 (Success)<br>20:23:26.448 –<br>20:23:26.448 –<br>20:23:26.448 Packet “HCI_LE_Set_Advertise_Enable”, Opcode 0x200a<br>20:23:26.448 Parameters:<br>20:23:26.448 | Advertise Enable : 0x01 (Enable)<br>20:23:26.448 –<br>20:23:26.448 Outgoing Dump:<br>20:23:26.448     0000: 01 0a 20 01 01                                  .. ..<br>20:23:26.468 Incoming Dump:<br>20:23:26.468     0000: 04 0e 04 01 0a 20 00                            ….. .<br>20:23:26.468 –<br>20:23:26.468 Packet “HCI_Command_Complete_LE_Set_Advertise_Enable_Event”, Opcode 0x200a<br>20:23:26.468 Parameters:<br>20:23:26.468 | Number HCI commands : 0x01<br>20:23:26.468 | Command Opcode      : 0x200a<br>20:23:26.468 | Status              : 0x00 (Success)<br>20:23:26.468 –<br>20:23:26.468 –<br>20:23:26.468 <strong>* Script End *</strong></p>
</blockquote>
<p>蓝牙Host和controller层通过HCI Command/Event交互数据，在早期的BR/EDR蓝牙中，Controller和Host会分开两颗芯片，再蓝牙4.x以后，芯片原厂已经把两颗芯片集成到一颗SOC中，hci层只有在蓝牙测试时候会单独用到，工程中，往往已经看不到hci层（已经打包在lib里），这一章有了一个层级间数据传输的感性认识，下面了解蓝牙协议的全貌。</p>
<h2 id="蓝牙协议架构"><a href="#蓝牙协议架构" class="headerlink" title="蓝牙协议架构"></a>蓝牙协议架构</h2><p><img src="7.png" alt=""></p>
<p>从OSI（Open System Interconnection）模型的角度看，蓝牙是一个比较简单的协议，它仅仅提供了物理层（Physical Layer）和数据链路层（Data Link Layer ）两个OSI层次，细化可分为如图所示的物理层（Physical Layer）、逻辑层（Logical Layer）、L2CAP Layer。</p>
<blockquote>
<p><strong>物理层</strong>，负责提供数据传输的物理通道（通常称为信道）。通常情况下，一个通信系统中存在几种不同类型的信道，如控制信道、数据信道、语音信道等等。<br><strong>逻辑层</strong>，在物理层的基础上，提供两个或多个设备之间、和物理无关的逻辑传输通道（也称作逻辑链路）。<br><strong>L2CAP层</strong>，L2CAP是逻辑链路控制和适配协议（Logical Link Control and Adaptation Protocol）的缩写，负责管理逻辑层提供的逻辑链路。基于该协议，不同Application可共享同一个逻辑链路。类似TCP/IP中端口（port）的概念。</p>
</blockquote>
<p>在l2cap之上还可以有profile层，理解蓝牙协议的profile，基于L2CAP提供的channel，实现各种各样的应用功能。Profile是蓝牙协议的特有概念，为了实现不同平台下的不同设备的互联互通，蓝牙协议不止规定了核心规范（称作Bluetooth core），也为各种不同的应用场景，定义了各种Application规范。</p>
<p>数据和指令的传输通过C/E，SCO，ACL，ISO几个通道穿梭在不同层协议，既保证了蓝牙协议层级间的独立，又完成了蓝牙数据的交互。</p>
<h2 id="蓝牙层级间的数据交互"><a href="#蓝牙层级间的数据交互" class="headerlink" title="蓝牙层级间的数据交互"></a>蓝牙层级间的数据交互</h2><p><img src="8.png" alt=""></p>
<p>蓝牙协议层级间的指令数据传输需要靠通道相互连接，操作系统消息传递机制以及callback函承担了实现层级间的数据通信和交互的桥梁。</p>
<p>我们以TI CC2541(真的很老了)的软件架构来讲述数据传输方式，工程内有多个线程同时工作：LL，HAL，HCI，L2CAP，GAP，SM，GATT，GAPROLE，GAPBondMgr，GATTServApp，SimpleBLEPeripheral。线程之间采用command/event方式交互数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">void osalInitTasks( void )</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  uint8 taskID = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);</span></span><br><span class="line"><span class="string">  osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* LL Task */</span></span><br><span class="line"><span class="string">  LL_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* Hal Task */</span></span><br><span class="line"><span class="string">  Hal_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* HCI Task */</span></span><br><span class="line"><span class="string">  HCI_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#if defined ( OSAL_CBTIMER_NUM_TASKS )</span></span><br><span class="line"><span class="string">  /* Callback Timer Tasks */</span></span><br><span class="line"><span class="string">  osal_CbTimerInit( taskID );</span></span><br><span class="line"><span class="string">  taskID += OSAL_CBTIMER_NUM_TASKS;</span></span><br><span class="line"><span class="string">#endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* L2CAP Task */</span></span><br><span class="line"><span class="string">  L2CAP_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* GAP Task */</span></span><br><span class="line"><span class="string">  GAP_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* SM Task */</span></span><br><span class="line"><span class="string">  SM_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* GATT Task */</span></span><br><span class="line"><span class="string">  GATT_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* Profiles */</span></span><br><span class="line"><span class="string">  GAPRole_Init( taskID++ );</span></span><br><span class="line"><span class="string">  GAPBondMgr_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  GATTServApp_Init( taskID++ );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* Application */</span></span><br><span class="line"><span class="string">  SimpleBLEPeripheral_Init( taskID );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br></pre></td></tr></table></figure>

<p><img src="9.png" alt=""></p>
<p>HOST端层级之间数据交互通道</p>
<p><img src="10.png" alt=""></p>
<p>HCI下层和controller的部分逻辑和上层host一样，只是在hci层做了一层数据传输的task，HCI_task作为host和controller的衔接，进行发送，解析指令，传输数据。</p>
<blockquote>
<p>​HCI command packet format:  cmd</p>
<ul>
<li>Packet Type + Command opcode + lengh + command payload</li>
<li>| 1 octet          |              2            |          1            |      n        |</li>
</ul>
<p>HCI data packet format:  eco acl</p>
<ul>
<li>Packet Type +   Conn Handle  + lengh +  data payload</li>
<li>| 1 octet             |      2        |            2           |      n      |</li>
</ul>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>弄清楚了基本概念，弄清楚了框架和数据流向和软件实施办法，就基本对蓝牙协议有了一个宏观认识，对于理解软件代码有一定帮助。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://wnnwoo.github.io/2019/07/27/bluetooth-baseband/" target="_blank" rel="noopener">蓝牙基带介绍</a><br><a href="http://www.wowotech.net/bluetooth/bt_protocol_arch.html" target="_blank" rel="noopener">蓝牙协议分析</a><br>蓝牙5.2规范</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>蓝牙协议</category>
      </categories>
      <tags>
        <tag>hci</tag>
        <tag>蓝牙框架</tag>
        <tag>acl</tag>
        <tag>蓝牙基本概念</tag>
      </tags>
  </entry>
  <entry>
    <title>深度报告：Nordic Semi 北欧半导体的现在和未来</title>
    <url>/2022/02/06/%E6%B7%B1%E5%BA%A6%E6%8A%A5%E5%91%8A%EF%BC%9ANordic-Semi-%E5%8C%97%E6%AC%A7%E5%8D%8A%E5%AF%BC%E4%BD%93%E7%9A%84%E7%8E%B0%E5%9C%A8%E5%92%8C%E6%9C%AA%E6%9D%A5/</url>
    <content><![CDATA[<p>Nordic Semi是一家有代表性的物联网连接芯片提供商。在全球BLE市场中，Nordic大约占40%市场份额，处于领头羊地位。Nordic公司非常重视与终端客户的战略合作，因为它提供的BLE主控器件属于核心部件供应商，因此非常了解客户产品的应用场景和客户需求。其次Nordic非常注重产品的研发，他们提供的芯片和SDK可快速帮助客户产品导入量产，并且质量稳定，客户群的口碑很好。最后，相比于博通，高通，以及国内的Start-up芯片公司，Nordic专注于中小规模企业的需求，而不是大客户导向的商业模式。这些特征都是Nordic在近5年成绩亮眼的因素。</p>
<a id="more"></a>
<p><img src="1.png" alt=""></p>
<h2 id="扩张中的BLE领导者"><a href="#扩张中的BLE领导者" class="headerlink" title="扩张中的BLE领导者"></a>扩张中的BLE领导者</h2><p>Nordic 专注于高增长的物联网市场，其核心无线连接芯片是低功耗蓝牙 (BLE)，占营收的 80%。BLE芯片市场广阔，应用在消费电子领域（无人机、PC 鼠标/键盘、虚拟现实等）、医疗保健（血糖监测糖尿病、血压计等）、可穿戴设备（智能手表、智能戒指等）、和建筑/零售（智能灯泡、智能门锁、非接触式支付终端、资产跟踪等）。</p>
<p>除开BLE，Nordic 正在向新兴市场，蜂窝、Wi-Fi 和独立电源管理等技术方向扩展产品线。这些产品正处于不同的商业化阶段，蜂窝产品线营2020年营收可占财年的 2%；Wi-Fi产品线预计要到 2023 年才能产生营收。这些扩充的产品线都是经过与合作伙伴，核心客户探讨之后谨慎开展开，并且依托现有客户群，可实现更加紧密的配合与绑定。<br><img src="2.png" alt=""></p>
<h2 id="NORDIC-BLE产品线领导之道"><a href="#NORDIC-BLE产品线领导之道" class="headerlink" title="NORDIC BLE产品线领导之道"></a>NORDIC BLE产品线领导之道</h2><p>Nordic 与巨型半导体公司，例如博通，高通，德州仪器，恩智浦，英飞凌、意法半导体以及专业的连接/物联网芯片专家 Silicon Lab，Semteck的竞争当中，处于领导者位置。它成功地保持了在 BLE 中的领先地位，并在 2016-20 年将其份额从 39% 扩大到 45%（不包含未认证BQB产品）。Nordic能够做到这一点有以下几个原因：</p>
<p><img src="3.png" alt=""></p>
<h3 id="Nordic活跃于SIG联盟并专注BLE市场"><a href="#Nordic活跃于SIG联盟并专注BLE市场" class="headerlink" title="Nordic活跃于SIG联盟并专注BLE市场"></a>Nordic活跃于SIG联盟并专注BLE市场</h3><p>Nordic只销售BLE芯片。经典蓝牙一般用于高数据速率传输和流媒体音乐传输，平均功率较高，常用于笔记本电脑、智能手机和与其对应的配件市场，例如遥控器，鼠标键盘，蓝牙音响等等。BLE 专为低功耗应用而设计，如小型电池供电设备。大部分Nordic竞争对手来自传统蓝牙厂商，而他们的芯片通常可以支持 BLE，但芯片不是从低功耗和单BLE SoC角度来设计。</p>
<h3 id="早期SIG-联盟BLE标准制定者之一"><a href="#早期SIG-联盟BLE标准制定者之一" class="headerlink" title="早期SIG 联盟BLE标准制定者之一"></a>早期SIG 联盟BLE标准制定者之一</h3><p>Nordic 是BLE 标准（当时称Wibree）开发的参与者之一（2005年）。这种早期参与者和参与，使 Nordic的贡献成为 BLE的核心技术规范。</p>
<h3 id="支持大众客户-初创客户"><a href="#支持大众客户-初创客户" class="headerlink" title="支持大众客户/初创客户"></a>支持大众客户/初创客户</h3><p>Nordic的许多客户是每年采购数十万片的小型初创公司。它的芯片的代码量较小，没有复杂操作系统，适合中小公司创业。通过与初创客户的互动，Nordic半导体能经常接触新的和创新应用的机会，并通过客户了解到最新的市场需求。</p>
<h3 id="连接未连接"><a href="#连接未连接" class="headerlink" title="连接未连接"></a>连接未连接</h3><p>Nordic芯片常用于智能踏板车、灯泡、电视遥控器，玩具等产品中。这些应用通常比较分散，也不需要大规模团队的编码工作，这意味传统的蓝牙芯片竞争对手很难高效的针对Nordic产品进行狙击，等对手看到Nordic成一定使用规模时，已经回天无力（心心之火，可以燎原）。同样，Nordic BLE 芯片是一个独立的系统，它不仅包含 BLE 无线模块，还包含独立的 MCU 和闪存。这意味着客户可以编写自己的代码，而无需从 STMicro，恩智浦、瑞萨、TI 等大型厂商购买单独的微控制器（节省开支）。</p>
<h3 id="丰富的产品组合"><a href="#丰富的产品组合" class="headerlink" title="丰富的产品组合"></a>丰富的产品组合</h3><p>Nordic产品丰富，从低成本到高性能，从单BLE到BLE和ZIGBEE的覆盖支持，软件SDK齐全，例程丰富，一级经销商和本土化技术支持，以及国外论坛的24小时在线支持模式。目前没有发现有能做到和Nordic一样的竞争对手。</p>
<h3 id="领导地位很难被取代"><a href="#领导地位很难被取代" class="headerlink" title="领导地位很难被取代"></a>领导地位很难被取代</h3><p>一旦确立为领导者，竞争对手很短时间追赶上。因为领导者可以参与到客户未来产品的规划中，并了解客户未来对产品的要求，使其领先一步做出满足客户需求的下一代产品。</p>
<h2 id="掘金IoT市场的新机会"><a href="#掘金IoT市场的新机会" class="headerlink" title="掘金IoT市场的新机会"></a>掘金IoT市场的新机会</h2><p>Nordic 的短距离无线通信芯片大量用于消费类产品电子、可穿戴设备、医疗保健、建筑和工业应用。Nordic的芯片赋能这些产品能够和其他设备进行连接或“对话”，他是IoT智能设备与主机设备通信的桥梁。</p>
<h3 id="短距离连接"><a href="#短距离连接" class="headerlink" title="短距离连接"></a>短距离连接</h3><p>IoT无线连接的协议众多，呈现碎片化趋势。例如，无线上网，蓝牙、低功耗蓝牙 (BLE)、LTE-M（远程）、ZigBee 等。相同的芯片通常可以支持一种或多种无线协议的需求迫在眉睫。比如BLE SoC芯片同时运行BLE，Thread、ZigBee、NFC、ANT 。 理论上，不同的无线协议适合不同的应用程序，例ZigBee 最初是为构建自动化和控制，2.4G芯片专为特定用途而设计，例如无线游戏控制器或 PC 鼠标。蓝牙用于解决附件与手机电脑的无线连接。私有2.4G芯片一直占 Nordic大部分营业收入，直到 BLE 从 2014 年开始起飞。<br><img src="4.png" alt=""></p>
<h3 id="蜂窝物联网"><a href="#蜂窝物联网" class="headerlink" title="蜂窝物联网"></a>蜂窝物联网</h3><p>Nordic的蜂窝物联网业务持续在增长，2020年，蜂窝芯片收入占总营业收入的 2%。其中的原因包括商业化一直不太成熟，并且行业生态系统、软件开发较为挑战，缓慢的认证流程和更长的客户开发周期。在该领域Nordic面临来自高通、联发科，ASR的挑战。鉴于蜂窝市场目前还处于初期阶段，很难断定Nordic的后续发展。</p>
<p>从技术路线上看，Nordic蜂窝网还是传统蜂窝 (4G/5G) 的对比如同经典蓝牙还是BLE的对比，两者旨在降低数据速率和功耗。因此，Nordic BLE的成功和部分 IP 可能对其蜂窝产品有利。Nordic的蜂窝客户数量在 2018 年增长了 6 倍。过去一年，已经有超过 100 家客户量产。蜂窝物联网的应用包括资产监控和跟踪、公用事业计量、工业连接/预测维护、智能城市——本质上是任何需要远程的“智能”活动连接而不是短距离的应用场景（偏工业）。<br><img src="5.png" alt=""></p>
<h3 id="Wi-Fi"><a href="#Wi-Fi" class="headerlink" title="Wi-Fi"></a>Wi-Fi</h3><p>Nordic 现有产品中缺失中等距离，具有一定吞吐的无线连接芯片，即 Wi-Fi。2020年11月，Nordic收购了半导体IP公司Imagination Technologies的Wi-Fi资产（开发团队、IPassets等）。</p>
<p>鉴于Nordic收购了 IP（不是一家芯片公司），它仍在开发自己的第一款Wi-Fi芯片，有望在 2022 年下半年推出，收入为2023 年。</p>
<h3 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h3><p>SoC 可以划分为多个功能模块，比如，内存、处理、模拟、安全、电源管理。理论上来说，Nordic的SoC的电源管理一直是作为芯片上的一“块”。然而，在更高的负载需求下，这种内部电源管理可能不是最佳选择（双核，高速，多协议并发应用场景）。所以，Nordic在2021 年6月推出其首款专用电源管理集成电路 (PMIC)。使用优的工艺节点来生产制造专用的PMIC可以达到更高的性能和效率。充电电路和电池等附加功能也可以添加在PMIC中。如果成功，Nordic可以往低功耗模拟半导体领域迈进一步。<br><img src="6.png" alt=""></p>
<h3 id="RF-FEM"><a href="#RF-FEM" class="headerlink" title="RF FEM"></a>RF FEM</h3><p>Nordic目前已经推出RF功率放大器，可以搭配其蓝牙SoC一起使用，可以达到更高的输出功率与传输距离。这些RF放大器使用低噪声放大器(LNA) 和功率放大器 (PA)构成（射频前端 RF 中的两个关键芯片FE），这些产品将拓宽Nordic传统的连接产品组合。 </p>
<h3 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h3><p>Nordic 于 2021 年推出了云服务业务。这些服务可以帮助工程师/开发人员使用 Nordic 芯片搭建一站式解决方案。该服务的初衷是为其蜂窝芯片提供定位服务，通过使用该云服务，客户可以移除 GPS 并从手机基站确定当前位置。或是辅助 GPS，可以更快获得结果。云服务对于 Nordic来说，是一种新的商业模式，值得期待。<br><img src="7.png" alt=""></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>元宇宙、云服务、无线音频，蜂窝物联网、Wi-Fi 和独立电源管理，FEM，与其说Nordic想复制BLE的成功，不然说Nordic正在凭借短距离无线通信的地位，正在迅速扩展与客户的粘度，加深与客户在系统层面上的商务合作。</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>市场趋势</category>
      </categories>
      <tags>
        <tag>Nordic</tag>
        <tag>Wifi</tag>
        <tag>RF FEM</tag>
      </tags>
  </entry>
  <entry>
    <title>细说蓝牙5三大新特性</title>
    <url>/2020/05/30/%E7%BB%86%E8%AF%B4%E8%93%9D%E7%89%995%E4%B8%89%E5%A4%A7%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="蓝牙5特性一-2X-数据吞吐量"><a href="#蓝牙5特性一-2X-数据吞吐量" class="headerlink" title="蓝牙5特性一  2X 数据吞吐量"></a>蓝牙5特性一  2X 数据吞吐量</h1><p>Bluetooth LE 4.2来说，蓝牙5的速率可以提升一倍是因为PHY层可以支持2Mbps数据传输率。在蓝牙5之前，LE只支持1Mbps PHY的速率。在此强调一点，PHY的速率只为蓝牙往空中丢数据的速率，并不等同于点对点设备的主端蓝牙芯片的应用层传到从端蓝牙芯片应用层的数据吞吐量。</p>
<a id="more"></a>
<p><img src="5.png" alt=""></p>
<h2 id="蓝牙单包数据结构"><a href="#蓝牙单包数据结构" class="headerlink" title="蓝牙单包数据结构"></a>蓝牙单包数据结构</h2><h3 id="蓝牙4-2一下数据结构"><a href="#蓝牙4-2一下数据结构" class="headerlink" title="蓝牙4.2一下数据结构"></a>蓝牙4.2一下数据结构</h3><p>先看Bluetooth 4.0/4.1 BLE数据传输率数据推演，设置主机Master端传输20个字节数据，其需要用时328us，从机响应80us，加上发射机发完一包数据至少需要休息150us，一个完整周期为328us + 150us + 80us + 150us，有效数据20字节，数据传输率226kbps。</p>
<p><img src="8.png" alt=""></p>
<h3 id="蓝牙4-2数据结构"><a href="#蓝牙4-2数据结构" class="headerlink" title="蓝牙4.2数据结构"></a>蓝牙4.2数据结构</h3><p>Bluetooth 4.2 LE部分扩充了单包数据载荷，每包可传输244字节，同理可以算出蓝牙4.2的数据传输率为781kbps。</p>
<p><img src="9.png" alt=""></p>
<h3 id="蓝牙5数据结构"><a href="#蓝牙5数据结构" class="headerlink" title="蓝牙5数据结构"></a>蓝牙5数据结构</h3><p>Bluetooth 5 BLE增加了2M PHY，传输244字节数据时间从2120us将为1060us，从机响应时间也从80us下降到40us，数据传输率提升一倍，到1.39Mbps。</p>
<p><img src="10.png" alt=""></p>
<h2 id="蓝牙5大数据传输应用场景"><a href="#蓝牙5大数据传输应用场景" class="headerlink" title="蓝牙5大数据传输应用场景"></a>蓝牙5大数据传输应用场景</h2><p>蓝牙5 PHY层支持2M的速率可以说明两个问题 :<br><strong>单位时间内可传输的数据吞吐量提升一倍。</strong><br><strong>传输相同数据量的数据蓝牙5的时间可降低一倍，从而使得蓝牙芯片可以更长时间的处于休眠模式，以降低蓝牙整体功耗。</strong></p>
<p><img src="6.png" alt=""></p>
<p>更快的数据传输率可以用来做什么呢？<br><strong>OTA空中升级</strong>，想必大家都有尝试过自己的智能穿戴设备升级工具，那体验，真的是非常糟糕，现在数量提升了，肯定马上把该速率用在OTA上，另外，在测试市面手环产品的过程中我们自己也看到一个非常糟糕的设计，大多数客户都还停留在使用BLE4.1产品，即使 使用了BLE4.2也很少有客户用到大PDU来改善OTA升级，这里希望各位工程师好好考虑该如何优化自己的产品，合理利用大数据传输提升OTA速度。下面从蓝牙SPEC上摘录几代BLE的规范和计算得来极限数据传输率供大家参考使用。<br><strong>语音图片传输</strong>，2M PHY的应用方向还有大块加密数据的瞬时传输，语音数据的传输，图片传输。<br><strong>IOS SPP 透传</strong>，经典蓝牙与ISO通过SPP传输需要额外mfi芯片，有了2M PHY，无需MFI芯片支持可以提高手机和蓝牙的数据通讯速率。</p>
<h1 id="蓝牙5特性一-8X-大广播包数据传输"><a href="#蓝牙5特性一-8X-大广播包数据传输" class="headerlink" title="蓝牙5特性一  8X 大广播包数据传输"></a>蓝牙5特性一  8X 大广播包数据传输</h1><h2 id="蓝牙4-x广播特性"><a href="#蓝牙4-x广播特性" class="headerlink" title="蓝牙4.x广播特性"></a>蓝牙4.x广播特性</h2><h3 id="蓝牙广播"><a href="#蓝牙广播" class="headerlink" title="蓝牙广播"></a>蓝牙广播</h3><p>蓝牙从机设备正常工作时会以一定频率发送广播包，告知周围设备可以来连接自己(connectable)，或者单纯发送广播数据(non-connectable)给到周围主设备。从机广播中可能包含设备的相关信息，设备名称，设备具有的服务uuid 等，SIG有明确规定。<br><strong>广播包类型</strong><br>广播包可以拆分为两种，一种是从机设备的广播的数据，一种是主机设备扫描到从机的广播包后响应返回给冲击设备的数据。<br><strong>广播包</strong> （Advertising Data):设备端主动发送的周期数据。<br><strong>响应包</strong> （Scan Response):主机主动扫描的情况下， 发送扫描请求给从机， 从机返回扫描响应数据。</p>
<h3 id="4-x广播包格式"><a href="#4-x广播包格式" class="headerlink" title="4.x广播包格式"></a>4.x广播包格式</h3><p>有效数据（significant）和无效数据（non-significant）两部分。<br>有效数据部分包含若干个广播数据单元，称为 AD Structure 。如图所示，AD Structure 的组成是：<br>长度 Len ，表示这个 AD Structure 的长度（除去 Len本身 1）<br><strong>类型 AD Type</strong><br>标记这段广播数据代表什么， 比如设备名， uuid 等。<br><strong>数据 AD data</strong><br>无效数据部分广播包的长度必须是 31 个 byte，如果有效数据部分不到 31 自己，剩下的就用 0 补全。这部分的数据是无效的。</p>
<p><img src="11.png" alt=""></p>
<p>以一个例子说明广播包和他的作用：<br>下图为CC2540 BLE抓包工具抓包的截图，右边AdvData内的数据即为广播数据，该广播数据由工程师自己设计，最大支持的字节为31个直接，两横条之间Time的差值即为广播间隔。</p>
<p><img src="12.jpg" alt=""></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>通常情况，广播包的作用如下：</p>
<ul>
<li>作为可连接设备时，广播包内带有产品信息，比如品牌logo，MAC地址等。</li>
<li>作为beacon设备时，可能携带传感器数据上报给集中器，可以携带beacon编号信息，MAC地址，特殊编码数据。</li>
<li>作为可连接设备的广播。<br>但对应Beacon应用来说，广播数据和可传输的数据长度就显得尤为重要。beacon广播结合Scan端集中器(Broadcaster and Observer)可以用于智能家具节点数据上报，工厂自动化设备数据上传，人员管控，冷链物流监控，特殊区域布防等多种应用场景；beacon广播结合地图亦可以作为室内导航定位的辅助工具，为室内定位提供良好的解决方案(目前已经相继出现好几家机场，医院，商城实现手机室内导航，其原理即依靠大量布置beacon点和手机地图匹配，利用手机扫描周围beacon广播信息，实现定位与导航，但定位精度存在偏差，不如UWB精度高)。<br>BLE的低功耗纽扣电池供电特性，小体积，可以和手机互联互通，使得beacon在上述应用呈爆发式增长。但其中会存在一个棘手的问题，31字节的广播包太短，每次广播能携带的有效数据太少，另外广播通道太少，只有37,38,39三个通道广播，可能存在多设备上报数据信道的干扰问题。</li>
</ul>
<h2 id="蓝牙5广播特性"><a href="#蓝牙5广播特性" class="headerlink" title="蓝牙5广播特性"></a>蓝牙5广播特性</h2><p>蓝牙5扩展了广播数据的有效载荷，提升了广播通道数，为上述应用和新的应用提供了更多技术储备。下面我们就来看看蓝牙5的8x 大广播包。</p>
<h3 id="蓝牙5广播包格式"><a href="#蓝牙5广播包格式" class="headerlink" title="蓝牙5广播包格式"></a>蓝牙5广播包格式</h3><p>蓝牙4.x协议规定蓝牙广播数据包每包数据最大只支持31字节数据传输，广播信道限制在37,38,39三个信道。在原有的用于传输广播数据的PDU（ADV_IND、ADV_DIRECT_IND、ADV_NONCONN_IND以及ADV_SCAN_IND，称作legacy PDUs）的基础上，蓝牙5增加了扩展的PDU（ADV_EXT_IND、AUX_ADV_IND、AUX_SYNC_IND以及AUX_CHAIN_IND，称作extended advertising PDUs)，同时也允许蓝牙在除开37,38,39三个通道之外的其他37个信道上发送长度介于0-255字节的数据。</p>
<p><img src="13.png" alt=""></p>
<p>蓝牙5.0把广播信道抽象为两类，一种叫主广播信道(primary advertisement channels)，另一种叫次广播信道，或者第二广播信道（Secondary Advertising Packets）。<br>主广播信道只工作在37，38，39三个信道，最大广播字节为31字节，广播的数据类型增加了一个ADV_EXT_IND指令，ADV_EXT_IND指令即为告知监听设备，我要广播大数据包广播了。<br>ADV_EXT_IND指令包含要在第二类次广播信道上发送的内容，第二广播信道发送广播数据的信道，物理PHY层，1M PHY，Coded PHY，2M PHY 等。<br>其示意如下图所示，首先在主广播信道广播ADV_EXT_IND信息，然后利用次广播信道(0-36 channel)广播255byte 数据。</p>
<p><img src="17.png" alt=""></p>
<p>如果我们有大于255字节的数据需要发送，蓝牙5.0广播协议栈中已经定义了AUX_CHAIN_IND，用于在第二广播信道上连续传输255字节数据，这样我们可以利用它发送超过255字节的大数据包数据。</p>
<p><img src="14.png" alt=""></p>
<p>第二广播信道（Secondary Advertising Packets）中的 AUX_ADV_IND、以及AUX_CHAIN_IND已经介绍，下面再看看AUX_SYNC_IND指令。</p>
<p><img src="15.png" alt=""></p>
<p>AUX_SYNC_IND指令用于大广播包数据的周期发送，广播者可随时修改其广播数据，但其他监听者依然可以监听到其周期性的广播内容，AUX_SYNC_IND指令包含广播间隔，调频序列，广播数据，广播者MAC地址等信息。</p>
<p><img src="16.png" alt=""></p>
<p>主机扫描过程中会首先监听到37,38,39，如果为大广播包，广播数据帧会携带大广播信道，主机会调频到相应信道进行数据监听。</p>
<p><img src="19.png" alt=""></p>
<h2 id="蓝牙5大广播包应用场景"><a href="#蓝牙5大广播包应用场景" class="headerlink" title="蓝牙5大广播包应用场景"></a>蓝牙5大广播包应用场景</h2><p>蓝牙4.2的广播数据31字节，蓝牙5.0的广播数据255字节，提升了8倍之多，由于使用了更多的广播信道，多个设备上报数据的抗信道干扰能力得到提升，另外由于多信道的使用，可以同步广播多种不同制式的信息，比如同时广播ibeacon和eddstone。结合蓝牙5 long range mode远距离传输模式，蓝牙的远距离beacon可以用在冷链物流，gps追踪器，工业自动化等在之前距离场合。</p>
<h1 id="蓝牙5特性一-4X-远距离数据传输"><a href="#蓝牙5特性一-4X-远距离数据传输" class="headerlink" title="蓝牙5特性一  4X 远距离数据传输"></a>蓝牙5特性一  4X 远距离数据传输</h1><h2 id="链结预算Link-Budget"><a href="#链结预算Link-Budget" class="headerlink" title="链结预算Link Budget"></a>链结预算Link Budget</h2><h3 id="传输距离理论"><a href="#传输距离理论" class="headerlink" title="传输距离理论"></a>传输距离理论</h3><p>在部署无线电通信时，链路预算(Link Budget)就是指从发射机开始通过射频媒介直到接收机之间的所有增益和衰减的总和。链路预算计算的目的是确保最终的接收信号强度处于接收机的接收灵敏阈值之上。简单来说，链路预算越大，发送端和接收端的距离越远。<br><code>Link budget [dB]= TX Power [dBm]- Sensitivity level [dBm]</code></p>
<ul>
<li>举例说明:<br>以TI CC2640R2F芯片为例，最大TX Power 5dbm, 最大接收灵敏度 -97dBm,根据上述公式，5 dBm - (-97 dBm) = 102 dB。<br>以Nordic Nrf52840芯片为例，最大TX Power 8dbm, 最大接收灵敏度 -96dBm,根据上述公式，8 dBm - (-96 dBm) = 104 dB。</li>
<li>结论:<br>链结预算值越大，传输距离越远。</li>
</ul>
<h3 id="无线电传输损耗"><a href="#无线电传输损耗" class="headerlink" title="无线电传输损耗"></a>无线电传输损耗</h3><h4 id="自由空间损耗"><a href="#自由空间损耗" class="headerlink" title="自由空间损耗"></a>自由空间损耗</h4><p>顾名思义，即为无线信号在空气中传播的损耗，可以由以下公式得到</p>
<p><img src="21.png" alt=""></p>
<p>F为频率，单位为G hz,D为发射端与接收端距离，单位为千米。由该公式可知路损的相关因素分为以下两个:<br>1).发射天线与接收天线间的距离。<br>2).频率， 频率越高路损越大。</p>
<h4 id="现实中无线电对地平面损失"><a href="#现实中无线电对地平面损失" class="headerlink" title="现实中无线电对地平面损失"></a>现实中无线电对地平面损失</h4><p>自由空间损耗是理想状态下无线电的损耗，实现当中还有两个考虑的因数，第一，天线损耗；第二，地表对无线的吸收和反射。<br>在考虑天线损耗和地表对无线的吸收和反射，我们可以概括得出下列公式。</p>
<p><img src="22.png" alt=""></p>
<p>h1和h2为发射端和接收端对地距离，k为自由空间波数，r是发射端和接收端的天线。<br>绘制自由空间损耗和地平面损失和距离关系的图如下所示：<br><img src="20.png" alt=""></p>
<p>在外界条件一致的情况下可以简化得到下面非常有意义的公式：<br><img src="23.png" alt=""></p>
<p>该公式的结论如下：<br>无线电传输距离和发射端，接收端对地距离成正比，距离地面越高，传输越远。</p>
<h2 id="蓝牙5-4X-远距离"><a href="#蓝牙5-4X-远距离" class="headerlink" title="蓝牙5 4X 远距离"></a>蓝牙5 4X 远距离</h2><p>在4.2及以前的版本中蓝牙低功耗在信道传输中未使用纠错编码技术，标准规定的基准灵敏度为-70dBm(基本上每一家蓝牙芯片厂商都可以做到-90dBm)。 蓝牙5引入了卷积前向纠错编码(Convolutional Forward Error Correction Coding) 技术，提高了接收机的抗干扰能力，将接收机的参考灵敏度分别提高到-75dBm (S=2编码)和-82dBm (S=4编码), 同时提高了接收机的载干比(载干比：C/I=载波信号强度/干扰信号强度)性能。使得在保持TX相同功耗情况下，蓝牙的距离提升了4倍，下面来说说如何做到提高接收灵敏度,依靠的就是编码PHY。</p>
<h3 id="BLE编码PHY"><a href="#BLE编码PHY" class="headerlink" title="BLE编码PHY"></a>BLE编码PHY</h3><p>蓝牙5除硬件支持1M,2M PHY，还支持两种编码方式的PHY，这两种编码方式的PHY是基于1M PHY的基础，使用1M PHY的物理通道。新的编码分为两种，一种编码PHY为500kbps(S=2)，另外一种编码PHY是125kbps(S=8)。<br>编码PHY的数据包类型和1M PHY/2M PHY 数据包类型略有不同，增加了CI(coding indicator)和TERM1和TERM2。CI和TERMx构成了FEC(Forward Error Correction)区块，利用FEC恢复在传输过程中的错误数据位，以提升接收灵敏度。</p>
<p><img src="30.png" alt=""></p>
<p>经过S=2或者S=8的编码，接收灵敏度可以提升4-6dBm，距离相应提升2-4被。但是进化出一种新的能力必然会牺牲自己一项能力，和1M PHY相比，传输的距离提升了，但传输相同数据包，编码PHY的功耗比1M PHY就要高出一节 (BLE 规定的包长一致，部分payload变为FEC data，实际有效的传输数据减少)。</p>
<p><img src="29.png" alt=""></p>
<h3 id="数据流传递方式"><a href="#数据流传递方式" class="headerlink" title="数据流传递方式"></a>数据流传递方式</h3><ul>
<li><strong>1M/2M PHY</strong><br>在没有编码方式下，TX数据包数据bit流通过加密(可选项)，CRC效验，白化之后发送出去；RX端接收到数据流解调后校验CRC，解密，得到原始数据包数据。</li>
</ul>
<p><img src="25.png" alt=""></p>
<ul>
<li><strong>500kbps,125kbps 编码PHY</strong><br>相对 1M/2M 未编码PHY的数据流，500k PHY, 125K phy多出两个部分：FEC(前向错误纠错) 编码和模式映射，大家肯定要问如何实现FEC，我们以编码PHY的流程来完整讲述一下数据流的编码和传输过程。</li>
</ul>
<p><img src="26.png" alt=""></p>
<ul>
<li><p><strong>错误检验 — CRC效验错误</strong><br>接收机首先会检测接收到的Access Adrees是否正确，如果Access Adrees错误，丢弃该数据包，检测完Access Adrees，接收机会去效验整个数据包，判断24位CRC是否完全吻合。</p>
</li>
<li><p><strong>白化</strong><br>数据白化的目的是在传输数据遇到连续000000，或者连续111111序列时，进行合理编码，减少传输长串重复序列数据。</p>
</li>
<li><p><strong>编码 — 前向错误编码</strong><br>前向错误编码算法使得接收机有能比恢复该数据包中的传输错误数据位，通过把原始数据进行编码得到新的数据流，即使新的数据流在传输过程中有个别位数据错误，FEC解码也能恢复原始数据，从而提高了传输的误码率。BT5.0使用的如下编码算法:</p>
</li>
</ul>
<p><img src="27.png" alt=""></p>
<p>G0(a0)先进行传输，G1(a1)在G0传输完成之后传输。</p>
<p><img src="28.png" alt=""></p>
<ul>
<li><strong>模式映射 — Pattern Mapper</strong><br>模式映射的目的是整理输出前向错误编码数据，输出的方式分为两种模式(P symbols)，一种P=1(S=2)，一种P=4(S=8)，两种模式下把前向错误编码数据进行加工，然后输出。由下面的表格所示，当P=1时，输出的data和输入保持不变，1位输入，1为输出；当P=4时，编码为4位再输出，所以可以看到P=4(S=8)时，输出的data数据量会更多，更进一部压缩实际可以传输的有效payload数据。</li>
</ul>
<h2 id="蓝牙远距离应用场景"><a href="#蓝牙远距离应用场景" class="headerlink" title="蓝牙远距离应用场景"></a>蓝牙远距离应用场景</h2><p>得益于前向错误编码和模式映射，使得蓝牙数据在传输过程中，RX端对整个payload数据包解码纠错能力有不同提升(简单说即为提高RX端接收灵敏度)，蓝牙5的传输距离才有显著的提升。125kbps使用S=8模式，传输距离相对传统BLE提升4倍，相应牺牲的数据传输率最多，500kbps使用S=2模式，传输距离相对传统BLE提升2倍。长距离模式可以有效可以支持到400-500米范围内BLE通讯。</p>
<p><img src="640.png" alt=""></p>
<p>#「Wireless Inside 微信公众号 (原无线技术联盟微信公众号) 微信交流群」</p>
<p>助力IoT行业朋友打通短距离无线通信圈的行业小社区。<br>集高通，Broadcom，TI，Nordic，Dialog，ST，Silicon lab, NXP, AMBIQ等蓝牙芯片原厂技术，市场，销售<br>集华为，MTK，泰凌微，凌思微，盛源达，ASR，华普微，中颖电子，百瑞互联，Realtek 国产芯片原厂技术，市场，销售<br>集Arrow，北高智，迅通，世强，利尔达，科通，全科等一线原厂代理商技术，市场，销售<br>集小米，华米，绿米，涂鸦，雅观，百度，阿里，Oppo，Vivo，京东互联网公司，品牌客户，方案公司技术，市场，销售，创始人<br>集蓝牙认证机构，被动器件，射频公司，以及SIG大佬</p>
<p>申请流程：<br>① 因群人数已超过限制人，请先微信扫描以下微信二维码或添加Xcoder微信号（blecoder），添加微信时请将您的个人信息进行备注（名字 公司 职位），以便登记，同时也欢迎同行和我进行交流。<br>② 由于需要我逐个邀请入群，所以请大家耐心等待！谢谢理解与支持！</p>
<p><img src="641.jpg" alt=""></p>
]]></content>
      <categories>
        <category>蓝牙协议</category>
      </categories>
      <tags>
        <tag>蓝牙 5</tag>
        <tag>远距离</tag>
        <tag>大广播</tag>
        <tag>2M PHY</tag>
      </tags>
  </entry>
</search>
